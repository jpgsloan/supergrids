# OUTPUTS:
#  O1: [CV 1]
#  O2: [CV 2]
#  O3: [CV 3]
#  O4: [CV 4]
#  O5: [CV 5]
#  O6: [CV 6]
#  O7: [CV 7]
#  O8: [CV 8]

# GATES ON X7:
#  G9: [Clock]
#  G10: [Reset]

# GATES ON MODULE 1:
#  G1.1: [Gate 1]
#  G1.2: [2]
#  G1.3: [3]
#  G1.4: [4]
#  G1.5: [5]
#  G1.6: [6]
#  G1.7: [7]
#  G1.8: [8]

# CONTROLLER 1:
#  B1.1: [Play]
#  B1.2: [Gates]
#  B1.3: [Reset]
#  B1.4: [Groove]
#  B1.5: [Select 1]
#  B1.6: [2]
#  B1.7: [9]
#  B1.8: [10]

# CONTROLLER 2:
#  B2.1: [CV]
#  B2.2: [Mute]
#  B2.3: [Perf]
#  B2.4: [Proj]
#  B2.5: [3]
#  B2.6: [4]
#  B2.7: [11]
#  B2.8: [12]

# CONTROLLER 3:
#  B3.1: [Step 1]
#  B3.2: [2]
#  B3.3: [5]
#  B3.4: [6]
#  B3.5: [9]
#  B3.6: [10]
#  B3.7: [13]
#  B3.8: [14]

# CONTROLLER 4:
#  B4.1: [3]
#  B4.2: [4]
#  B4.3: [7]
#  B4.4: [8]
#  B4.5: [11]
#  B4.6: [12]
#  B4.7: [15]
#  B4.8: [16]

[p2b8]
[p2b8]
[p2b8]
[p2b8]

# -------------------------------------------------
# Mode Selector
# -------------------------------------------------

# # Button group for mode select of knobs
[buttongroup]
    select = _SEL_BTN_PRSSD_INV
    minactive = 1
    maxactive = 1
    button1 = B1.2
    button2 = B2.1
    button3 = B1.4
    button4 = B2.3
    button5 = B2.4
    led1 = L1.2
    led2 = L2.1
    led3 = L1.4
    led4 = L2.3
    led5 = L2.4
    buttonoutput1 = _GTS_MDE
    buttonoutput2 = _CV_MDE
    buttonoutput3 = _GRVE_MDE
    buttonoutput4 = _PERF_MDE
    buttonoutput5 = _PROJ_MDE
    buttonpress = _MDE_PRESSED

# the inverse is used by the activity pots, which must be not selected when changing modes.
[copy]
    input = _MDE_PRESSED * -1 + 1
    output = _MDE_PRSS_INV

[once]
    delay = 0
    trigger = _START_UP_TRIG

[gatetool]
    inputtrigger = _START_UP_TRIG
    gatelength = 2
    outputgate = _STARTING_UP

[copy]
    input = _STARTING_UP * -1 + 1
    output = _STARTING_UP_INV

[copy]
    input = _MDE_PRSS_INV * _STARTING_UP_INV
    output = _DISABLE_POTS

# One of the mode buttons is being held down.
[mixer]
    input1 = B1.2
    input2 = B2.1
    input3 = B1.4
    input4 = B2.3
    input5 = B2.4
    maximum = _MDE_HELD

[copy]
    input = _MDE_HELD * -1 + 1
    output = _MDE_HELD_INV

# Toggle mute states for selection.
[copy]
    input = B2.2
    output = _MTE_SELECTION

# -------------------------------------------------
# Midi In
# -------------------------------------------------

# midiin
[midiin]
    channel = _MIDI_IN_CHANNEL + 1
    usb = 1
    notegap = 1
    notegate1 = _MIDI_IN_GATE_1
    notegate2 = _MIDI_IN_GATE_2
    notegate3 = _MIDI_IN_GATE_3
    notegate4 = _MIDI_IN_GATE_4
    notegate5 = _MIDI_IN_GATE_5
    notegate6 = _MIDI_IN_GATE_6
    notegate7 = _MIDI_IN_GATE_7
    notegate8 = _MIDI_IN_GATE_8
    clock = _MIDI_CLK_RAW
    stop = _MIDI_RESET
    running = _MIDI_RUNNING

# -------------------------------------------------
# Main Clocking
# -------------------------------------------------

[clocktool]
    clock = _MIDI_CLK_RAW
    reset = _RESET
    inputpitch = _MIDI_CLK_RTE

# Math, 2^(rate*10) = hz.
[math]
    input1 = 2
    input2 = _MIDI_CLK_RTE * 10
    power = _MIDI_CLK_HZ

# only allow 6 values per volt (60 values per 10V or 1.0), to match the precision of bpm (1HZ is 60BPM)
# (Also we can only show 3 digits in the X1 register anyway, so incrememnts of 1 bpm at a time)
[quantizer]
    input = _INT_HZ * 4 # multiply by 4 for 16th note granularity
    steps = 6
    output = _INT_HZ_16

# If rate pot is mostly counterclockwise, then we start using midi external clock instead of the internal master tempo. The chosen rate will then get used to drive the internal lfo clocks.
[compare]
    input = _INT_HZ
    compare = 0.02
    ifless = _MIDI_CLK_HZ
    else = _INT_HZ_16
    output = _MASTER_HZ

[copy]
    input = _MASTER_HZ

[compare]
    input = _INT_HZ
    compare = 0.02
    ifless = 1
    else = 0
    output = _IS_MIDI_CLK

[copy]
    input = -1 * _IS_MIDI_CLK + 1
    output = _IS_MIDI_CLK_INV

# Play/Stop button
[button]
    button = B1.1
    onvalue = 1 * _IS_MIDI_CLK_INV + _MIDI_RUNNING
    offvalue = 0
    led = L1.1
    output = _IS_PLAYING

# Reset Button
[copy]
    input = B1.3 + _MIDI_RESET
    output = _COMBINED_RESET

[copy]
    input = _COMBINED_RESET * _MDE_HELD_INV
    output = _RESET_RAW

[gatetool]
    inputgate = _RESET_RAW
    gatelength = 0.005
    mingatelength = 0.005
    outputgate = _RESET

[burst]
    hz = 200
    trigger = _RESET
    count = 1
    skip = 1
    output = _RESET_DELAYED

[copy]
    input = _RESET_DELAYED
    output = G10

[copy]
    input = _RESET * -1 + 1
    output = _RESET_INV

[copy]
    input = _IS_PLAYING * _RESET_INV
    output = _IS_PLAYING_OR_RESET

# 0 BPM to 240BPM at 16th notes. Multiply by 4 for 16th notes granularity.
[lfo]
#   rate = _CLOCK_DIV_MUL_1 # from clock div/mult buttons
    hz = _MASTER_HZ * _IS_PLAYING_OR_RESET
    sync = _RESET_DELAYED
    phase = _LFO_PHASE_1
    pulsewidth = 0.05
    level = _RESET_INV
    square = _LFO_CLK_1

[lfo]
#   rate = _CLOCK_DIV_MUL_2
    hz = _MASTER_HZ * _IS_PLAYING_OR_RESET
    sync = _RESET_DELAYED
    phase = _LFO_PHASE_2
    pulsewidth = 0.05
    level = _RESET_INV
    square = _LFO_CLK_2

[lfo]
#   rate = _CLOCK_DIV_MUL_3
    hz = _MASTER_HZ * _IS_PLAYING_OR_RESET
    sync = _RESET_DELAYED
    phase = _LFO_PHASE_3
    pulsewidth = 0.05
    level = _RESET_INV
    square = _LFO_CLK_3

[lfo]
#   rate = _CLOCK_DIV_MUL_4
    hz = _MASTER_HZ * _IS_PLAYING_OR_RESET
    sync = _RESET_DELAYED
    phase = _LFO_PHASE_4
    pulsewidth = 0.05
    level = _RESET_INV
    square = _LFO_CLK_4

[lfo]
#   rate = _CLOCK_DIV_MUL_5
    hz = _MASTER_HZ * _IS_PLAYING_OR_RESET
    sync = _RESET_DELAYED
    phase = _LFO_PHASE_5
    pulsewidth = 0.05
    level = _RESET_INV
    square = _LFO_CLK_5

[lfo]
#   rate = _CLOCK_DIV_MUL_6
    hz = _MASTER_HZ * _IS_PLAYING_OR_RESET
    sync = _RESET_DELAYED
    phase = _LFO_PHASE_6
    pulsewidth = 0.05
    level = _RESET_INV
    square = _LFO_CLK_6

[lfo]
#   rate = _CLOCK_DIV_MUL_7
    hz = _MASTER_HZ * _IS_PLAYING_OR_RESET
    sync = _RESET_DELAYED
    phase = _LFO_PHASE_7
    pulsewidth = 0.05
    level = _RESET_INV
    square = _LFO_CLK_7

[lfo]
#   rate = _CLOCK_DIV_MUL_8
    hz = _MASTER_HZ * _IS_PLAYING_OR_RESET
    sync = _RESET_DELAYED
    phase = _LFO_PHASE_8
    pulsewidth = 0.05
    level = _RESET_INV
    square = _LFO_CLK_8

# To Avoid skipping a beat if the first beat is set to play "early" we re-use the delayed reset as a clock beat that happens at phase == 0.
[compare]
    input = _LFO_PHASE_1
    compare = 0
    ifgreater = _LFO_CLK_1 + _RESET_DELAYED
    else = _LFO_CLK_1
    output = _CLK_1

[compare]
    input = _LFO_PHASE_2
    compare = 0
    ifgreater = _LFO_CLK_2 + _RESET_DELAYED
    else = _LFO_CLK_2
    output = _CLK_2

[compare]
    input = _LFO_PHASE_3
    compare = 0
    ifgreater = _LFO_CLK_3 + _RESET_DELAYED
    else = _LFO_CLK_3
    output = _CLK_3

[compare]
    input = _LFO_PHASE_4
    compare = 0
    ifgreater = _LFO_CLK_4 + _RESET_DELAYED
    else = _LFO_CLK_4
    output = _CLK_4

[compare]
    input = _LFO_PHASE_5
    compare = 0
    ifgreater = _LFO_CLK_5 + _RESET_DELAYED
    else = _LFO_CLK_5
    output = _CLK_5

[compare]
    input = _LFO_PHASE_6
    compare = 0
    ifgreater = _LFO_CLK_6 + _RESET_DELAYED
    else = _LFO_CLK_6
    output = _CLK_6

[compare]
    input = _LFO_PHASE_7
    compare = 0
    ifgreater = _LFO_CLK_7 + _RESET_DELAYED
    else = _LFO_CLK_7
    output = _CLK_7

[compare]
    input = _LFO_PHASE_8
    compare = 0
    ifgreater = _LFO_CLK_8 + _RESET_DELAYED
    else = _LFO_CLK_8
    output = _CLK_8

[lfo]
    hz = _MASTER_HZ * _IS_PLAYING_OR_RESET
    sync = _RESET_DELAYED
    pulsewidth = 0.05
    phase = 0.5
    level = _RESET_INV
    square = _GROOVE_PHASE_CLOCK

# -------------------------------------------------
# Project Mode
# -------------------------------------------------

# use reset button as a clear button, if a mode button is being held when reset pressed. If Proj Mode is held when reset pressed, we clear the entire project and reset tempo to 120bpm. Midi settings are not cleared though.
[superjust]
    bypass = 1
    input1 = B1.2 * B1.3 + _CLR_PROJECT
    input2 = B2.1 * B1.3 + _CLR_PROJECT
    input3 = B1.4 * B1.3 + _CLR_PROJECT
    input4 = B2.3 * B1.3 + _CLR_PROJECT
    input5 = B2.4 * B1.3
    output1 = _CLR_GTS_MDE
    output2 = _CLR_CV_MDE
    output3 = _CLR_GRVE
    output4 = _CLR_PERF
    output5 = _CLR_PROJECT

[copy]
    input = _CLR_GTS_MDE + _CLR_CV_MDE
    output = _CLR_GTS_OR_CV_MDE

# Internal clock master tempo
[pot]
    select = _PROJ_MDE * _STARTING_UP_INV
    clear = _CLR_PROJECT
    pot = P1.1
    ledgauge = 0
    outputscale = 4
    notch = 0.1
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    output = _INT_HZ
    onchange = _HZ_CHNG

# Midi settings
[pot]
    select = _PROJ_MDE * _STARTING_UP_INV
    startvalue = 0
    pot = P2.1
    outputscale = 15
    output = _MIDI_IN_CHANNEL

[pot]
    select = _PROJ_MDE * _STARTING_UP_INV
    startvalue = 0
    pot = P3.1
    outputscale = 15
    output = _MIDI_OUT_CHANNEL

[pot]
    select = _PROJ_MDE * _STARTING_UP_INV
    startvalue = 0
    pot = P4.1
    discrete = 16
    output = _MIDI_NOTE_SEL

# [button]
#   select = _PROJ_MDE
#   button = B1.5
#   states = 1
#   led = L1.5

# [button]
#   select = _PROJ_MDE
#   button = B2.6
#   states = 1
#   led = L2.6

# [button]
#   select = _PROJ_MDE
#   button = B4.6
#   states = 1
#   led = L4.6

# [matrixmixer]
#   select = _PROJ_MDE
#   clear = _CLR_PRJ_MDE
#   preset = _PRST
#   savepreset = _SV
#   loadpreset = _LD
#   input1 = 1
#   input2 = 1
#   input3 = 1
#   input4 = 1
#   startvalue = 0
#   button11 = B1.7
#   button12 = B1.6
#   button13 = B1.8
#   button14 = B2.5
#   button21 = B2.7
#   button22 = B2.8
#   button23 = B3.5
#   button24 = B3.7
#   button31 = B3.6
#   button32 = B3.8
#   button33 = B4.5
#   button34 = B4.7
#   button41 = B4.8
#   led11 = _C
#   led12 = _C_SH
#   led13 = _D
#   led14 = _D_SH
#   led21 = _E
#   led22 = _F
#   led23 = _F_SH
#   led24 = _G
#   led31 = _G_SH
#   led32 = _A
#   led33 = _A_SH
#   led34 = _B
#   led41 = _C_OCT

# [superjust]
#   bypass = 1
#   input1 = _C_SH + _L1_6_A
#   input2 = _D_SH + _L2_5_A
#   input3 = _F_SH + _L3_5_A
#   input4 = _G_SH + _L3_6_A
#   input5 = _A_SH + _L4_5_A
#   output1 = _C_SH_A
#   output2 = _D_SH_A
#   output3 = _F_SH_A
#   output4 = _G_SH_A
#   output5 = _A_SH_A

# Create half-lit chromatic keyboard on the step button leds.
# Superjust circuit is the most efficient way to do simple math with 8 ins and outs.
# The circuit itself is doing nothing in this case, just using it as a cheap way to send inputs to outputs.
# [superjust]
#   bypass = 1
#   input1 = 0.2 * _PROJ_MDE + _C
#   input2 = 0.1 * _PROJ_MDE + _C_SH_A
#   input3 = 0.2 * _PROJ_MDE + _D
#   input4 = 0.1 * _PROJ_MDE + _D_SH_A
#   input5 = 0.2 * _PROJ_MDE + _E
#   input6 = 0.2 * _PROJ_MDE + _F
#   input7 = 0.1 * _PROJ_MDE + _F_SH_A
#   input8 = 0.2 * _PROJ_MDE + _G
#   output1 = _L1_7_A
#   output2 = _L1_6_B
#   output3 = _L1_8_A
#   output4 = _L2_5_B
#   output5 = _L2_7_A
#   output6 = _L2_8_A
#   output7 = _L3_5_B
#   output8 = _L3_7_A

# [copy]
#   input = _PROJ_MDE * -1 + 1
#   output = _PROJ_MDE_INV

# [superjust]
#   bypass = 1
#   input1 = 0.1 * _PROJ_MDE + _G_SH_A
#   input2 = 0.2 * _PROJ_MDE + _A
#   input3 = 0.1 * _PROJ_MDE + _A_SH_A
#   input4 = 0.2 * _PROJ_MDE + _B
#   input5 = 0.2 * _PROJ_MDE + _C_OCT
#   input6 = _PROJ_MDE_INV * _L2_6
#   input7 = _PROJ_MDE_INV * _L4_6
#   output1 = _L3_6_B
#   output2 = _L3_8_A
#   output3 = _L4_5_B
#   output4 = _L4_7_A
#   output5 = _L4_8_A
#   output6 = _L2_6_A
#   output7 = _L4_6_A

# -------------------------------------------------
# Groove Mode
# -------------------------------------------------

[pot]
    select = _GRVE_MDE * _STARTING_UP_INV
    ledgauge = 0
    clear = _CLR_GRVE
    startvalue = 0
    outputscale = 49
    pot = P2.1
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    output = _GROOVE_PATTERN
    onchange = _GRV_PATTERN_CHANGED

[copy]
    input = B1.4 * _GRVE_MDE
    output = _GRVE_SET_LEN_MDE

[copy]
    input = _GRVE_SET_LEN_MDE * -1 + 1
    output = _GRVE_SET_LEN_MDE_INV

[algoquencer]
    select = _GRVE_MDE
    clock = _GROOVE_PHASE_CLOCK
    reset = _RESET_DELAYED
    activity = 1
    lengthbutton = _GRVE_SET_LEN_MDE
#   length = 8
    pattern = _GROOVE_PATTERN
    pitchlow = -0.42
    pitchhigh = 0.42
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    button1 = B1.5
    button2 = B1.6
    button3 = B2.5
    button4 = B2.6
    button5 = B3.5
    button6 = B3.6
    button7 = B4.5
    button8 = B4.6
    button9 = B1.7
    button10 = B1.8
    button11 = B2.7
    button12 = B2.8
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    led1 = L1.5
    led2 = L1.6
    led3 = L2.5
    led4 = L2.6
    led5 = L3.5
    led6 = L3.6
    led7 = L4.5
    led8 = L4.6
    led9 = L1.7
    led10 = L1.8
    led11 = L2.7
    led12 = L2.8
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8
    pitch = _GROOVE_CURVE_RAW

# Sample the groove curve each Groove_Phase_clock tick. The reason for this is because in some cases Algoquencer will immediately change its pitch output (for example, when changing presets or length) which causes the groove to skip beats if you go from a high positive number to very negative number. Adding a sample circuit ensures the value of the groove curve can ONLY ever change on the clock ticks.
[sample]
    input = _GROOVE_CURVE_RAW
    sample = _GROOVE_PHASE_CLOCK
    output = _GROOVE_CURVE

[algoquencer]
    select = _GRVE_MDE
    clock = _GROOVE_PHASE_CLOCK
    reset = _RESET_DELAYED
    activity = 1
    lengthbutton = _GRVE_SET_LEN_MDE
    pitchlow = 0
    pitchhigh = 0.42
    pitch1 = 0
    pitch2 = 0.42
    pitch3 = 0
    pitch4 = 0.42
    pitch5 = 0
    pitch6 = 0.42
    pitch7 = 0
    pitch8 = 0.42
    pitch9 = 0
    pitch10 = 0.42
    pitch11 = 0
    pitch12 = 0.42
    pitch13 = 0
    pitch14 = 0.42
    pitch15 = 0
    pitch16 = 0.42
    button1 = B1.5
    button2 = B1.6
    button3 = B2.5
    button4 = B2.6
    button5 = B3.5
    button6 = B3.6
    button7 = B4.5
    button8 = B4.6
    button9 = B1.7
    button10 = B1.8
    button11 = B2.7
    button12 = B2.8
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    led1 = L1.5
    led2 = L1.6
    led3 = L2.5
    led4 = L2.6
    led5 = L3.5
    led6 = L3.6
    led7 = L4.5
    led8 = L4.6
    led9 = L1.7
    led10 = L1.8
    led11 = L2.7
    led12 = L2.8
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8
    pitch = _SWING_CURVE_RAW

# Sample the groove curve each Groove_Phase_clock tick. The reason for this is because in some cases Algoquencer will immediately change its pitch output (for example, when changing presets or length) which causes the groove to skip beats if you go from a high positive number to very negative number. Adding a sample circuit ensures the value of the groove curve can ONLY ever change on the clock ticks.
[sample]
    input = _SWING_CURVE_RAW
    sample = _GROOVE_PHASE_CLOCK
    output = _SWING_CURVE

# [switch]
#   forward = _GROOVE_PHASE_CLOCK
#   reset = _RESET_DELAYED
#   input1 = 0
#   input2 = 0.42
#   output1 = _SWING_CURVE

# GROOVE Attenuator
[pot]
    select = _GRVE_MDE * _SEL_1
    clear = _CLR_GRVE * _SEL_1
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.1
    notch = 0.2
    bipolar = _GRV_ATN_1

[pot]
    select = _GRVE_MDE * _SEL_2
    clear = _CLR_GRVE * _SEL_2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.1
    notch = 0.2
    bipolar = _GRV_ATN_2

[pot]
    select = _GRVE_MDE * _SEL_3
    clear = _CLR_GRVE * _SEL_3
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.1
    notch = 0.2
    bipolar = _GRV_ATN_3

[pot]
    select = _GRVE_MDE * _SEL_4
    clear = _CLR_GRVE * _SEL_4
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.1
    notch = 0.2
    bipolar = _GRV_ATN_4

[pot]
    select = _GRVE_MDE * _SEL_5
    clear = _CLR_GRVE * _SEL_5
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.1
    notch = 0.2
    bipolar = _GRV_ATN_5

[pot]
    select = _GRVE_MDE * _SEL_6
    clear = _CLR_GRVE * _SEL_6
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.1
    notch = 0.2
    bipolar = _GRV_ATN_6

[pot]
    select = _GRVE_MDE * _SEL_7
    clear = _CLR_GRVE * _SEL_7
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.1
    notch = 0.2
    bipolar = _GRV_ATN_7

[pot]
    select = _GRVE_MDE * _SEL_8
    clear = _CLR_GRVE * _SEL_8
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.1
    notch = 0.2
    bipolar = _GRV_ATN_8

# Pots for Swing
[pot]
    pot = P2.2
    select = _GRVE_MDE * _SEL_1
    clear = _CLR_GRVE * _SEL_1
    notch = 0.2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    bipolar = _SWING_AMOUNT_1

[pot]
    pot = P2.2
    select = _GRVE_MDE * _SEL_2
    clear = _CLR_GRVE * _SEL_2
    notch = 0.2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    bipolar = _SWING_AMOUNT_2

[pot]
    pot = P2.2
    select = _GRVE_MDE * _SEL_3
    clear = _CLR_GRVE * _SEL_3
    notch = 0.2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    bipolar = _SWING_AMOUNT_3

[pot]
    pot = P2.2
    select = _GRVE_MDE * _SEL_4
    clear = _CLR_GRVE * _SEL_4
    notch = 0.2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    bipolar = _SWING_AMOUNT_4

[pot]
    pot = P2.2
    select = _GRVE_MDE * _SEL_5
    clear = _CLR_GRVE * _SEL_5
    notch = 0.2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    bipolar = _SWING_AMOUNT_5

[pot]
    pot = P2.2
    select = _GRVE_MDE * _SEL_6
    clear = _CLR_GRVE * _SEL_6
    notch = 0.2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    bipolar = _SWING_AMOUNT_6

[pot]
    pot = P2.2
    select = _GRVE_MDE * _SEL_7
    clear = _CLR_GRVE * _SEL_7
    notch = 0.2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    bipolar = _SWING_AMOUNT_7

[pot]
    pot = P2.2
    select = _GRVE_MDE * _SEL_8
    clear = _CLR_GRVE * _SEL_8
    notch = 0.2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    bipolar = _SWING_AMOUNT_8

# Groove Jitter
[pot]
    select = _GRVE_MDE * _SEL_1
    clear = _CLR_GRVE * _SEL_1
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.2
    startvalue = 0
    outputscale = 0.42
    output = _GROOVE_JITTER_1

[pot]
    select = _GRVE_MDE * _SEL_2
    clear = _CLR_GRVE * _SEL_2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.2
    startvalue = 0
    outputscale = 0.42
    output = _GROOVE_JITTER_2

[pot]
    select = _GRVE_MDE * _SEL_3
    clear = _CLR_GRVE * _SEL_3
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.2
    startvalue = 0
    outputscale = 0.42
    output = _GROOVE_JITTER_3

[pot]
    select = _GRVE_MDE * _SEL_4
    clear = _CLR_GRVE * _SEL_4
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.2
    startvalue = 0
    outputscale = 0.42
    output = _GROOVE_JITTER_4

[pot]
    select = _GRVE_MDE * _SEL_5
    clear = _CLR_GRVE * _SEL_5
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.2
    startvalue = 0
    outputscale = 0.42
    output = _GROOVE_JITTER_5

[pot]
    select = _GRVE_MDE * _SEL_6
    clear = _CLR_GRVE * _SEL_6
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.2
    startvalue = 0
    outputscale = 0.42
    output = _GROOVE_JITTER_6

[pot]
    select = _GRVE_MDE * _SEL_7
    clear = _CLR_GRVE * _SEL_7
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.2
    startvalue = 0
    outputscale = 0.42
    output = _GROOVE_JITTER_7

[pot]
    select = _GRVE_MDE * _SEL_8
    clear = _CLR_GRVE * _SEL_8
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.2
    startvalue = 0
    outputscale = 0.42
    output = _GROOVE_JITTER_8

# Groove Jitter values
# TODO: experiment with just one rand value instead of per track. Can still dial it in with individual track attenuators, but maybe we dont need the random values themselves on a per track basis.
[random]
    clock = _GROOVE_PHASE_CLOCK
    minimum = -1
    maximum = 1
    output = _RND_1

[random]
    clock = _GROOVE_PHASE_CLOCK
    minimum = -1
    maximum = 1
    output = _RND_2

[random]
    clock = _GROOVE_PHASE_CLOCK
    minimum = -1
    maximum = 1
    output = _RND_3

[random]
    clock = _GROOVE_PHASE_CLOCK
    minimum = -1
    maximum = 1
    output = _RND_4

[random]
    clock = _GROOVE_PHASE_CLOCK
    minimum = -1
    maximum = 1
    output = _RND_5

[random]
    clock = _GROOVE_PHASE_CLOCK
    minimum = -1
    maximum = 1
    output = _RND_6

[random]
    clock = _GROOVE_PHASE_CLOCK
    minimum = -1
    maximum = 1
    output = _RND_7

[random]
    clock = _GROOVE_PHASE_CLOCK
    minimum = -1
    maximum = 1
    output = _RND_8

[superjust]
    bypass = 1
    input1 = _RND_1 * _GROOVE_JITTER_1
    input2 = _RND_2 * _GROOVE_JITTER_2
    input3 = _RND_3 * _GROOVE_JITTER_3
    input4 = _RND_4 * _GROOVE_JITTER_4
    input5 = _RND_5 * _GROOVE_JITTER_5
    input6 = _RND_6 * _GROOVE_JITTER_6
    input7 = _RND_7 * _GROOVE_JITTER_7
    input8 = _RND_8 * _GROOVE_JITTER_8
    output1 = _ATTENUATED_GRV_RANDOM_1
    output2 = _ATTENUATED_GRV_RANDOM_2
    output3 = _ATTENUATED_GRV_RANDOM_3
    output4 = _ATTENUATED_GRV_RANDOM_4
    output5 = _ATTENUATED_GRV_RANDOM_5
    output6 = _ATTENUATED_GRV_RANDOM_6
    output7 = _ATTENUATED_GRV_RANDOM_7
    output8 = _ATTENUATED_GRV_RANDOM_8

[superjust]
    input1 = _SWING_CURVE * _SWING_AMOUNT_1 + _ATTENUATED_GRV_RANDOM_1
    input2 = _SWING_CURVE * _SWING_AMOUNT_2 + _ATTENUATED_GRV_RANDOM_2
    input3 = _SWING_CURVE * _SWING_AMOUNT_3 + _ATTENUATED_GRV_RANDOM_3
    input4 = _SWING_CURVE * _SWING_AMOUNT_4 + _ATTENUATED_GRV_RANDOM_4
    input5 = _SWING_CURVE * _SWING_AMOUNT_5 + _ATTENUATED_GRV_RANDOM_5
    input6 = _SWING_CURVE * _SWING_AMOUNT_6 + _ATTENUATED_GRV_RANDOM_6
    input7 = _SWING_CURVE * _SWING_AMOUNT_7 + _ATTENUATED_GRV_RANDOM_7
    input8 = _SWING_CURVE * _SWING_AMOUNT_8 + _ATTENUATED_GRV_RANDOM_8
    bypass = 1
    output1 = _GRV_OFFSET_1
    output2 = _GRV_OFFSET_2
    output3 = _GRV_OFFSET_3
    output4 = _GRV_OFFSET_4
    output5 = _GRV_OFFSET_5
    output6 = _GRV_OFFSET_6
    output7 = _GRV_OFFSET_7
    output8 = _GRV_OFFSET_8

[superjust]
    bypass = 1
    input1 = _GROOVE_CURVE * _GRV_ATN_1 + _GRV_OFFSET_1
    input2 = _GROOVE_CURVE * _GRV_ATN_2 + _GRV_OFFSET_2
    input3 = _GROOVE_CURVE * _GRV_ATN_3 + _GRV_OFFSET_3
    input4 = _GROOVE_CURVE * _GRV_ATN_4 + _GRV_OFFSET_4
    input5 = _GROOVE_CURVE * _GRV_ATN_5 + _GRV_OFFSET_5
    input6 = _GROOVE_CURVE * _GRV_ATN_6 + _GRV_OFFSET_6
    input7 = _GROOVE_CURVE * _GRV_ATN_7 + _GRV_OFFSET_7
    input8 = _GROOVE_CURVE * _GRV_ATN_8 + _GRV_OFFSET_8
    output1 = _LFO_PHASE_UNBOUNDED_1
    output2 = _LFO_PHASE_UNBOUNDED_2
    output3 = _LFO_PHASE_UNBOUNDED_3
    output4 = _LFO_PHASE_UNBOUNDED_4
    output5 = _LFO_PHASE_UNBOUNDED_5
    output6 = _LFO_PHASE_UNBOUNDED_6
    output7 = _LFO_PHASE_UNBOUNDED_7
    output8 = _LFO_PHASE_UNBOUNDED_8

[fold]
    input = _LFO_PHASE_UNBOUNDED_1
    foldby = 0.01
    minimum = -0.42
    maximum = 0.42
    output = _LFO_PHASE_1

[fold]
    input = _LFO_PHASE_UNBOUNDED_2
    foldby = 0.01
    minimum = -0.42
    maximum = 0.42
    output = _LFO_PHASE_2

[fold]
    input = _LFO_PHASE_UNBOUNDED_3
    foldby = 0.01
    minimum = -0.42
    maximum = 0.42
    output = _LFO_PHASE_3

[fold]
    input = _LFO_PHASE_UNBOUNDED_4
    foldby = 0.01
    minimum = -0.42
    maximum = 0.42
    output = _LFO_PHASE_4

[fold]
    input = _LFO_PHASE_UNBOUNDED_5
    foldby = 0.01
    minimum = -0.42
    maximum = 0.42
    output = _LFO_PHASE_5

[fold]
    input = _LFO_PHASE_UNBOUNDED_6
    foldby = 0.01
    minimum = -0.42
    maximum = 0.42
    output = _LFO_PHASE_6

[fold]
    input = _LFO_PHASE_UNBOUNDED_7
    foldby = 0.01
    minimum = -0.42
    maximum = 0.42
    output = _LFO_PHASE_7

[fold]
    input = _LFO_PHASE_UNBOUNDED_8
    foldby = 0.01
    minimum = -0.42
    maximum = 0.42
    output = _LFO_PHASE_8

# GATE LENGTH Algoquencers. One per track so that you can create independent gate length patterns per track.
[algoquencer]
    select = _GRVE_MDE
    clock = _CLK_1
    reset = _RESET
    activity = 1
    lengthbutton = _GRVE_SET_LEN_MDE
#   length = 8
    pattern = _GATE_LENGTH_PATTERN
    pitchlow = -0.9
    pitchhigh = 0.9
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    button1 = B1.5
    button2 = B1.6
    button3 = B2.5
    button4 = B2.6
    button5 = B3.5
    button6 = B3.6
    button7 = B4.5
    button8 = B4.6
    button9 = B1.7
    button10 = B1.8
    button11 = B2.7
    button12 = B2.8
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    led1 = L1.5
    led2 = L1.6
    led3 = L2.5
    led4 = L2.6
    led5 = L3.5
    led6 = L3.6
    led7 = L4.5
    led8 = L4.6
    led9 = L1.7
    led10 = L1.8
    led11 = L2.7
    led12 = L2.8
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8
    pitch = _GATE_LENGTH_CURVE

# Pot for selecting Gate Length pattern
[pot]
    pot = P3.1
    select = _GRVE_MDE
    clear = _CLR_GRVE
    startvalue = 0
    outputscale = 49
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    ledgauge = 0
    output = _GATE_LENGTH_PATTERN
    onchange = _GL_PATTERN_CHANGED

# Show gate length pots in both groove mode and gates mode
[copy]
    input = _GRVE_MDE + _GTS_MDE
    output = _SHW_G_LEN

[copy]
    input = _CLR_GRVE + _CLR_GTS_MDE
    output = _CLR_G_LEN

# Pots for Gate Length Base
[pot]
    select = _SHW_G_LEN * _SEL_1
    clear = _CLR_G_LEN * _SEL_1
    startvalue = 0.2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.2
    outputscale = 0.9
    output = _GATE_LENGTH_BASE_1

[pot]
    select = _SHW_G_LEN * _SEL_2
    clear = _CLR_G_LEN * _SEL_2
    startvalue = 0.2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.2
    outputscale = 0.9
    output = _GATE_LENGTH_BASE_2

[pot]
    select = _SHW_G_LEN * _SEL_3
    clear = _CLR_G_LEN * _SEL_3
    startvalue = 0.2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.2
    outputscale = 0.9
    output = _GATE_LENGTH_BASE_3

[pot]
    select = _SHW_G_LEN * _SEL_4
    clear = _CLR_G_LEN * _SEL_4
    startvalue = 0.2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.2
    outputscale = 0.9
    output = _GATE_LENGTH_BASE_4

[pot]
    select = _SHW_G_LEN * _SEL_5
    clear = _CLR_G_LEN * _SEL_5
    startvalue = 0.2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.2
    outputscale = 0.9
    output = _GATE_LENGTH_BASE_5

[pot]
    select = _SHW_G_LEN * _SEL_6
    clear = _CLR_G_LEN * _SEL_6
    startvalue = 0.2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.2
    outputscale = 0.9
    output = _GATE_LENGTH_BASE_6

[pot]
    select = _SHW_G_LEN * _SEL_7
    clear = _CLR_G_LEN * _SEL_7
    startvalue = 0.2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.2
    outputscale = 0.9
    output = _GATE_LENGTH_BASE_7

[pot]
    select = _SHW_G_LEN * _SEL_8
    clear = _CLR_G_LEN * _SEL_8
    startvalue = 0.2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.2
    outputscale = 0.9
    output = _GATE_LENGTH_BASE_8

# Gate Length Attenuator
[pot]
    select = _GRVE_MDE * _SEL_1
    clear = _CLR_GRVE * _SEL_1
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.1
    notch = 0.2
    bipolar = _GATE_LENGTH_ATTEN_1

[pot]
    select = _GRVE_MDE * _SEL_2
    clear = _CLR_GRVE * _SEL_2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.1
    notch = 0.2
    bipolar = _GATE_LENGTH_ATTEN_2

[pot]
    select = _GRVE_MDE * _SEL_3
    clear = _CLR_GRVE * _SEL_3
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.1
    notch = 0.2
    bipolar = _GATE_LENGTH_ATTEN_3

[pot]
    select = _GRVE_MDE * _SEL_4
    clear = _CLR_GRVE * _SEL_4
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.1
    notch = 0.2
    bipolar = _GATE_LENGTH_ATTEN_4

[pot]
    select = _GRVE_MDE * _SEL_5
    clear = _CLR_GRVE * _SEL_5
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.1
    notch = 0.2
    bipolar = _GATE_LENGTH_ATTEN_5

[pot]
    select = _GRVE_MDE * _SEL_6
    clear = _CLR_GRVE * _SEL_6
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.1
    notch = 0.2
    bipolar = _GATE_LENGTH_ATTEN_6

[pot]
    select = _GRVE_MDE * _SEL_7
    clear = _CLR_GRVE * _SEL_7
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.1
    notch = 0.2
    bipolar = _GATE_LENGTH_ATTEN_7

[pot]
    select = _GRVE_MDE * _SEL_8
    clear = _CLR_GRVE * _SEL_8
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.1
    notch = 0.2
    bipolar = _GATE_LENGTH_ATTEN_8

# Gate Length Jitter
[pot]
    select = _GRVE_MDE * _SEL_1
    clear = _CLR_GRVE * _SEL_1
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.2
    outputscale = 0.9
    output = _GATE_LEN_JITTER_1

[pot]
    select = _GRVE_MDE * _SEL_2
    clear = _CLR_GRVE * _SEL_2
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.2
    outputscale = 0.9
    output = _GATE_LEN_JITTER_2

[pot]
    select = _GRVE_MDE * _SEL_3
    clear = _CLR_GRVE * _SEL_3
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.2
    outputscale = 0.9
    output = _GATE_LEN_JITTER_3

[pot]
    select = _GRVE_MDE * _SEL_4
    clear = _CLR_GRVE * _SEL_4
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.2
    outputscale = 0.9
    output = _GATE_LEN_JITTER_4

[pot]
    select = _GRVE_MDE * _SEL_5
    clear = _CLR_GRVE * _SEL_5
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.2
    outputscale = 0.9
    output = _GATE_LEN_JITTER_5

[pot]
    select = _GRVE_MDE * _SEL_6
    clear = _CLR_GRVE * _SEL_6
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.2
    outputscale = 0.9
    output = _GATE_LEN_JITTER_6

[pot]
    select = _GRVE_MDE * _SEL_7
    clear = _CLR_GRVE * _SEL_7
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.2
    outputscale = 0.9
    output = _GATE_LEN_JITTER_7

[pot]
    select = _GRVE_MDE * _SEL_8
    clear = _CLR_GRVE * _SEL_8
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.2
    outputscale = 0.9
    output = _GATE_LEN_JITTER_8

[superjust]
    bypass = 1
    input1 = _RND_1 * _GATE_LEN_JITTER_1 + _GATE_LENGTH_BASE_1
    input2 = _RND_2 * _GATE_LEN_JITTER_2 + _GATE_LENGTH_BASE_2
    input3 = _RND_3 * _GATE_LEN_JITTER_3 + _GATE_LENGTH_BASE_3
    input4 = _RND_4 * _GATE_LEN_JITTER_4 + _GATE_LENGTH_BASE_4
    input5 = _RND_5 * _GATE_LEN_JITTER_5 + _GATE_LENGTH_BASE_5
    input6 = _RND_6 * _GATE_LEN_JITTER_6 + _GATE_LENGTH_BASE_6
    input7 = _RND_7 * _GATE_LEN_JITTER_7 + _GATE_LENGTH_BASE_7
    input8 = _RND_8 * _GATE_LEN_JITTER_8 + _GATE_LENGTH_BASE_8
    output1 = _GATE_LEN_RND_BASE_1
    output2 = _GATE_LEN_RND_BASE_2
    output3 = _GATE_LEN_RND_BASE_3
    output4 = _GATE_LEN_RND_BASE_4
    output5 = _GATE_LEN_RND_BASE_5
    output6 = _GATE_LEN_RND_BASE_6
    output7 = _GATE_LEN_RND_BASE_7
    output8 = _GATE_LEN_RND_BASE_8

[superjust]
    bypass = 1
    input1 = _GATE_LENGTH_CURVE * _GATE_LENGTH_ATTEN_1 + _GATE_LEN_RND_BASE_1
    input2 = _GATE_LENGTH_CURVE * _GATE_LENGTH_ATTEN_2 + _GATE_LEN_RND_BASE_2
    input3 = _GATE_LENGTH_CURVE * _GATE_LENGTH_ATTEN_3 + _GATE_LEN_RND_BASE_3
    input4 = _GATE_LENGTH_CURVE * _GATE_LENGTH_ATTEN_4 + _GATE_LEN_RND_BASE_4
    input5 = _GATE_LENGTH_CURVE * _GATE_LENGTH_ATTEN_5 + _GATE_LEN_RND_BASE_5
    input6 = _GATE_LENGTH_CURVE * _GATE_LENGTH_ATTEN_6 + _GATE_LEN_RND_BASE_6
    input7 = _GATE_LENGTH_CURVE * _GATE_LENGTH_ATTEN_7 + _GATE_LEN_RND_BASE_7
    input8 = _GATE_LENGTH_CURVE * _GATE_LENGTH_ATTEN_8 + _GATE_LEN_RND_BASE_8
    output1 = _G_LEN_RAW_1
    output2 = _G_LEN_RAW_2
    output3 = _G_LEN_RAW_3
    output4 = _G_LEN_RAW_4
    output5 = _G_LEN_RAW_5
    output6 = _G_LEN_RAW_6
    output7 = _G_LEN_RAW_7
    output8 = _G_LEN_RAW_8

# Enforce bounds between 0.01 and 0.99 as a matter of personal preference, since 0 would mean no gate, and 1 would mean gate that links with the next step.
[fold]
    input = _G_LEN_RAW_1
    foldby = 0.01
    minimum = 0.01
    maximum = 0.9
    output = _G_LEN_1

[fold]
    input = _G_LEN_RAW_2
    foldby = 0.01
    minimum = 0.01
    maximum = 0.9
    output = _G_LEN_2

[fold]
    input = _G_LEN_RAW_3
    foldby = 0.01
    minimum = 0.01
    maximum = 0.9
    output = _G_LEN_3

[fold]
    input = _G_LEN_RAW_4
    foldby = 0.01
    minimum = 0.01
    maximum = 0.9
    output = _G_LEN_4

[fold]
    input = _G_LEN_RAW_5
    foldby = 0.01
    minimum = 0.01
    maximum = 0.9
    output = _G_LEN_5

[fold]
    input = _G_LEN_RAW_6
    foldby = 0.01
    minimum = 0.01
    maximum = 0.9
    output = _G_LEN_6

[fold]
    input = _G_LEN_RAW_7
    foldby = 0.01
    minimum = 0.01
    maximum = 0.9
    output = _G_LEN_7

[fold]
    input = _G_LEN_RAW_8
    foldby = 0.01
    minimum = 0.01
    maximum = 0.9
    output = _G_LEN_8

# -------------------------------------------------
# Performance Mode
# -------------------------------------------------

# # POTS for Activity
# calculate when activity pots should be selected. If you are holding down the performance mode button, the variation knobs are selected, otherwise the activity knobs are selected.
[superjust]
    bypass = 1
    input1 = B2.3
    output1 = _VAR_PERF_POTS
    input2 = -1 * B2.3 + 1
    output2 = _ACT_PERF_POTS
    input3 = _PERF_MDE * _ACT_PERF_POTS
    output3 = _ACT_PERF_MDE
    input4 = -1 * _PERF_MDE + 1
    output4 = _PRF_MD_INV
    input5 = 16
    output5 = _NUM_PAT
    input6 = _PERF_MDE * _VAR_PERF_POTS
    output6 = _VAR_PERF_MDE

[superjust]
    bypass = 1
    input1 = _GTS_MDE * _SEL_1 + _ACT_PERF_MDE
    input2 = _GTS_MDE * _SEL_2 + _ACT_PERF_MDE
    input3 = _GTS_MDE * _SEL_3 + _ACT_PERF_MDE
    input4 = _GTS_MDE * _SEL_4 + _ACT_PERF_MDE
    input5 = _GTS_MDE * _SEL_5 + _ACT_PERF_MDE
    input6 = _GTS_MDE * _SEL_6 + _ACT_PERF_MDE
    input7 = _GTS_MDE * _SEL_7 + _ACT_PERF_MDE
    input8 = _GTS_MDE * _SEL_8 + _ACT_PERF_MDE
    output1 = _ACT_SEL_1
    output2 = _ACT_SEL_2
    output3 = _ACT_SEL_3
    output4 = _ACT_SEL_4
    output5 = _ACT_SEL_5
    output6 = _ACT_SEL_6
    output7 = _ACT_SEL_7
    output8 = _ACT_SEL_8

# Switch pots based on if you are in performance mode or not
[superjust]
    bypass = 1
    input1 = _PERF_MDE * P1.1
    input2 = _PERF_MDE * P2.1
    input3 = _PERF_MDE * P3.1
    input4 = _PERF_MDE * P4.1
    input5 = _PERF_MDE * P1.2
    input6 = _PERF_MDE * P2.2
    input7 = _PERF_MDE * P3.2
    input8 = _PERF_MDE * P4.2
    output1 = _PRF_PT_1
    output2 = _PRF_PT_2
    output3 = _PRF_PT_3
    output4 = _PRF_PT_4
    output5 = _PRF_PT_5
    output6 = _PRF_PT_6
    output7 = _PRF_PT_7
    output8 = _PRF_PT_8

[superjust]
    bypass = 1
    input1 = _PRF_MD_INV * P1.1 + _PRF_PT_1
    input2 = _PRF_MD_INV * P1.1 + _PRF_PT_2
    input3 = _PRF_MD_INV * P1.1 + _PRF_PT_3
    input4 = _PRF_MD_INV * P1.1 + _PRF_PT_4
    input5 = _PRF_MD_INV * P1.1 + _PRF_PT_5
    input6 = _PRF_MD_INV * P1.1 + _PRF_PT_6
    input7 = _PRF_MD_INV * P1.1 + _PRF_PT_7
    input8 = _PRF_MD_INV * P1.1 + _PRF_PT_8
    output1 = _ACT_POT_1
    output2 = _ACT_POT_2
    output3 = _ACT_POT_3
    output4 = _ACT_POT_4
    output5 = _ACT_POT_5
    output6 = _ACT_POT_6
    output7 = _ACT_POT_7
    output8 = _ACT_POT_8

[pot]
    select = _ACT_SEL_1 * _DISABLE_POTS # You dont want this pot selected, when you are switching modes, or else the pot value will jump immediately.
    clear = _CLR_GTS_MDE * _SEL_1 + _CLR_PERF
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = _ACT_POT_1
    notch = 0.1
    outputscale = 0.5
    slope = 1.5
    bipolar = _ACT_1

[pot]
    select = _ACT_SEL_2 * _DISABLE_POTS
    clear = _CLR_GTS_MDE * _SEL_2 + _CLR_PERF
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = _ACT_POT_2
    notch = 0.1
    outputscale = 0.5
    slope = 1.5
    bipolar = _ACT_2

[pot]
    select = _ACT_SEL_3 * _DISABLE_POTS
    clear = _CLR_GTS_MDE * _SEL_3 + _CLR_PERF
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = _ACT_POT_3
    notch = 0.1
    outputscale = 0.5
    slope = 1.5
    bipolar = _ACT_3

[pot]
    select = _ACT_SEL_4 * _DISABLE_POTS
    clear = _CLR_GTS_MDE * _SEL_4 + _CLR_PERF
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = _ACT_POT_4
    notch = 0.1
    outputscale = 0.5
    slope = 1.5
    bipolar = _ACT_4

[pot]
    select = _ACT_SEL_5 * _DISABLE_POTS
    clear = _CLR_GTS_MDE * _SEL_5 + _CLR_PERF
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = _ACT_POT_5
    notch = 0.1
    outputscale = 0.5
    slope = 1.5
    bipolar = _ACT_5

[pot]
    select = _ACT_SEL_6 * _DISABLE_POTS
    clear = _CLR_GTS_MDE * _SEL_6 + _CLR_PERF
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = _ACT_POT_6
    notch = 0.1
    outputscale = 0.5
    slope = 1.5
    bipolar = _ACT_6

[pot]
    select = _ACT_SEL_7 * _DISABLE_POTS
    clear = _CLR_GTS_MDE * _SEL_7 + _CLR_PERF
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = _ACT_POT_7
    notch = 0.1
    outputscale = 0.5
    slope = 1.5
    bipolar = _ACT_7

[pot]
    select = _ACT_SEL_8 * _DISABLE_POTS
    clear = _CLR_GTS_MDE * _SEL_8 + _CLR_PERF
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = _ACT_POT_8
    notch = 0.1
    outputscale = 0.5
    slope = 1.5
    bipolar = _ACT_8

# POTS for gate variation
# Switch pots based on if you are in performance mode or not. But only show the variation pots if holding down the performance mode button.
[superjust]
    bypass = 1
    input1 = _GTS_MDE * _SEL_1 + _VAR_PERF_MDE
    input2 = _GTS_MDE * _SEL_2 + _VAR_PERF_MDE
    input3 = _GTS_MDE * _SEL_3 + _VAR_PERF_MDE
    input4 = _GTS_MDE * _SEL_4 + _VAR_PERF_MDE
    input5 = _GTS_MDE * _SEL_5 + _VAR_PERF_MDE
    input6 = _GTS_MDE * _SEL_6 + _VAR_PERF_MDE
    input7 = _GTS_MDE * _SEL_7 + _VAR_PERF_MDE
    input8 = _GTS_MDE * _SEL_8 + _VAR_PERF_MDE
    output1 = _VAR_SEL_1
    output2 = _VAR_SEL_2
    output3 = _VAR_SEL_3
    output4 = _VAR_SEL_4
    output5 = _VAR_SEL_5
    output6 = _VAR_SEL_6
    output7 = _VAR_SEL_7
    output8 = _VAR_SEL_8

[superjust]
    bypass = 1
    input1 = _PRF_MD_INV * P2.1 + _PRF_PT_1
    input2 = _PRF_MD_INV * P2.1 + _PRF_PT_2
    input3 = _PRF_MD_INV * P2.1 + _PRF_PT_3
    input4 = _PRF_MD_INV * P2.1 + _PRF_PT_4
    input5 = _PRF_MD_INV * P2.1 + _PRF_PT_5
    input6 = _PRF_MD_INV * P2.1 + _PRF_PT_6
    input7 = _PRF_MD_INV * P2.1 + _PRF_PT_7
    input8 = _PRF_MD_INV * P2.1 + _PRF_PT_8
    output1 = _VAR_POT_1
    output2 = _VAR_POT_2
    output3 = _VAR_POT_3
    output4 = _VAR_POT_4
    output5 = _VAR_POT_5
    output6 = _VAR_POT_6
    output7 = _VAR_POT_7
    output8 = _VAR_POT_8

# # POTS for variation
[pot]
    select = _VAR_SEL_1 * _DISABLE_POTS
    clear = _CLR_GTS_MDE * _SEL_1 + _CLR_PERF
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = _VAR_POT_1
    discrete = 16
    outputscale = 0.0625
    output = _VAR_1

[pot]
    select = _VAR_SEL_2 * _DISABLE_POTS
    clear = _CLR_GTS_MDE * _SEL_2 + _CLR_PERF
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = _VAR_POT_2
    discrete = 16
    outputscale = 0.0625
    output = _VAR_2

[pot]
    select = _VAR_SEL_3 * _DISABLE_POTS
    clear = _CLR_GTS_MDE * _SEL_3 + _CLR_PERF
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = _VAR_POT_3
    discrete = 16
    outputscale = 0.0625
    output = _VAR_3

[pot]
    select = _VAR_SEL_4 * _DISABLE_POTS
    clear = _CLR_GTS_MDE * _SEL_4 + _CLR_PERF
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = _VAR_POT_4
    discrete = 16
    outputscale = 0.0625
    output = _VAR_4

[pot]
    select = _VAR_SEL_5 * _DISABLE_POTS
    clear = _CLR_GTS_MDE * _SEL_5 + _CLR_PERF
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = _VAR_POT_5
    discrete = 16
    outputscale = 0.0625
    output = _VAR_5

[pot]
    select = _VAR_SEL_6 * _DISABLE_POTS
    clear = _CLR_GTS_MDE * _SEL_6 + _CLR_PERF
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = _VAR_POT_6
    discrete = 16
    outputscale = 0.0625
    output = _VAR_6

[pot]
    select = _VAR_SEL_7 * _DISABLE_POTS
    clear = _CLR_GTS_MDE * _SEL_7 + _CLR_PERF
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = _VAR_POT_7
    discrete = 16
    outputscale = 0.0625
    output = _VAR_7

[pot]
    select = _VAR_SEL_8 * _DISABLE_POTS
    clear = _CLR_GTS_MDE * _SEL_8 + _CLR_PERF
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = _VAR_POT_8
    discrete = 16
    outputscale = 0.0625
    output = _VAR_8

# Buttongroup for selecting presets
[buttongroup]
    select = _PERF_MDE
    button1 = B1.5
    button2 = B1.6
    button3 = B2.5
    button4 = B2.6
    button5 = B3.5
    button6 = B3.6
    button7 = B4.5
    button8 = B4.6
    button9 = B1.7
    button10 = B1.8
    button11 = B2.7
    button12 = B2.8
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    led1 = L1.5
    led2 = L1.6
    led3 = L2.5
    led4 = L2.6
    led5 = L3.5
    led6 = L3.6
    led7 = L4.5
    led8 = L4.6
    led9 = L1.7
    led10 = L1.8
    led11 = L2.7
    led12 = L2.8
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8
    output = _PRST
    buttonpress = _LD_RAW # _PRST_PRESSED
    longpress = _SV
    longpresstime = 1

[nudge]
    buttonup = _LD_RAW
    amount = 1
    minimum = 0
    maximum = 1
    startvalue = 0
    clear = _LD
    dontsave = 1
    output = _LD_PRESSED_SINCE_LAST_TICK

[copy]
    input = _LD_PRESSED_SINCE_LAST_TICK * _GROOVE_PHASE_CLOCK
    output = _LD

[mixer]
    input1 = B1.5
    input2 = B1.6
    input3 = B2.5
    input4 = B2.6
    input5 = B3.5
    input6 = B3.6
    input7 = B4.5
    input8 = B4.6
    maximum = _TOP_BUTTONS_PRESS

[mixer]
    input1 = B1.7
    input2 = B1.8
    input3 = B2.7
    input4 = B2.8
    input5 = B3.7
    input6 = B3.8
    input7 = B4.7
    input8 = B4.8
    maximum = _BOTTOM_BUTTONS_PRESS

[mixer]
    input1 = _TOP_BUTTONS_PRESS
    input2 = _BOTTOM_BUTTONS_PRESS
    maximum = _STEP_BUTTON_PRESSED

[contour]
    gate = _STEP_BUTTON_PRESSED * _PERF_MDE
    abortattack = 1
    startfromzero = 1
    predelay = 0.1
    attack = 9 # 1.5 seconds duration
    decay = 0
    sustain = 0
    release = 0
    output = _SV_ANIMATION

[superjust]
    bypass = 1
    input1 = _SV_ANIMATION + L4.6
    input2 = _SV_ANIMATION + L4.5
    input3 = _SV_ANIMATION + L3.6
    input4 = _SV_ANIMATION + L3.5
    input5 = _SV_ANIMATION + L2.6
    input6 = _SV_ANIMATION + L2.5
    input7 = _SV_ANIMATION + L1.6
    input8 = _SV_ANIMATION + L1.5
    output1 = L4.6
    output2 = L4.5
    output3 = L3.6
    output4 = L3.5
    output5 = L2.6
    output6 = L2.5
    output7 = L1.6
    output8 = L1.5

[superjust]
    bypass = 1
    input1 = _SV_ANIMATION + L4.8
    input2 = _SV_ANIMATION + L4.7
    input3 = _SV_ANIMATION + L3.8
    input4 = _SV_ANIMATION + L3.7
    input5 = _SV_ANIMATION + L2.8
    input6 = _SV_ANIMATION + L2.7
    input7 = _SV_ANIMATION + L1.8
    input8 = _SV_ANIMATION + L1.7
    output1 = L4.8
    output2 = L4.7
    output3 = L3.8
    output4 = L3.7
    output5 = L2.8
    output6 = L2.7
    output7 = L1.8
    output8 = L1.7

# calculate the number of buttons being held
# [mixer]
#   input1 = B1.7
#   input2 = B1.5
#   input3 = B1.8
#   input4 = B1.6
#   input5 = B2.7
#   input6 = B2.5
#   input7 = B2.8
#   input8 = B2.6
#   output = _NUM_STEP_BUTTONS_HELD_1TO8

# [mixer]
#   input1 = B3.7
#   input2 = B3.5
#   input3 = B3.8
#   input4 = B3.6
#   input5 = B4.7
#   input6 = B4.5
#   input7 = B4.8
#   input8 = B4.6
#   output = _NUM_STEP_BUTTONS_HELD_9TO16

# [copy]
#   input = _NUM_STEP_BUTTONS_HELD_1TO8 + _NUM_STEP_BUTTONS_HELD_9TO16
#   output = _NUM_STEP_BUTTONS_HELD

# calculate which button is being held (this is only valid when only one button is held)
# [mixer]
#   input1 = B1.7 * 1
#   input2 = B1.5 * 2
#   input3 = B1.8 * 3
#   input4 = B1.6 * 4
#   input5 = B2.7 * 5
#   input6 = B2.5 * 6
#   input7 = B2.8 * 7
#   input8 = B2.6 * 8
#   output = _STEP_BUTTON_HELD_1TO8

# [mixer]
#   input1 = B3.7 * 9
#   input2 = B3.5 * 10
#   input3 = B3.8 * 11
#   input4 = B3.6 * 12
#   input5 = B4.7 * 13
#   input6 = B4.5 * 14
#   input7 = B4.8 * 15
#   input8 = B4.6 * 16
#   output = _STEP_BUTTON_HELD_9TO16

# [copy]
#   input = _STEP_BUTTON_HELD_1TO8 + _STEP_BUTTON_HELD_9TO16
#   output = _STEP_BUTTON_HELD

# [compare]
#   input = _NUM_STEP_BUTTONS_HELD
#   compare = 1
#   ifequal = _STEP_BUTTON_PRESSED_1
#   else = 0
#   output = _CLEAR_CV_BUTTON_GROUPS

# CV RANGE OVERRIDE
# [buttongroup]
#   select = _CV_MDE * _SEL_1
#   button1 = B1.7
#   button2 = B1.5
#   button3 = B1.8
#   button4 = B1.6
#   button5 = B2.7
#   button6 = B2.5
#   button7 = B2.8
#   button8 = B2.6
#   button9 = B3.7
#   button10 = B3.5
#   button11 = B3.8
#   button12 = B3.6
#   button13 = B4.7
#   button14 = B4.5
#   button15 = B4.8
#   button16 = B4.6
#   value1 = 1
#   value2 = 1
#   value3 = 1
#   value4 = 1
#   value5 = 1
#   value6 = 1
#   value7 = 1
#   value8 = 1
#   value9 = 1
#   value10 = 1
#   value11 = 1
#   value12 = 1
#   value13 = 1
#   value14 = 1
#   value15 = 1
#   value16 = 1
#   maxactive = 16
#   clear = _CLEAR_CV_BUTTON_GROUPS * _SEL_1
#   startbutton = _STEP_BUTTON_HELD
#   led1 = L1.7
#   led2 = L1.5
#   led3 = L1.8
#   led4 = L1.6
#   led5 = L2.7
#   led6 = L2.5
#   led7 = L2.8
#   led8 = L2.6
#   led9 = L3.7
#   led10 = L3.5
#   led11 = L3.8
#   led12 = L3.6
#   led13 = L4.7
#   led14 = L4.5
#   led15 = L4.8
#   led16 = L4.6
#   buttonoutput1 = _CV_BUT_OUT_1_1
#   buttonoutput2 = _CV_BUT_OUT_1_2
#   buttonoutput3 = _CV_BUT_OUT_1_3
#   buttonoutput4 = _CV_BUT_OUT_1_4
#   buttonoutput5 = _CV_BUT_OUT_1_5
#   buttonoutput6 = _CV_BUT_OUT_1_6
#   buttonoutput7 = _CV_BUT_OUT_1_7
#   buttonoutput8 = _CV_BUT_OUT_1_8
#   buttonoutput9 = _CV_BUT_OUT_1_9
#   buttonoutput10 = _CV_BUT_OUT_1_10
#   buttonoutput11 = _CV_BUT_OUT_1_11
#   buttonoutput12 = _CV_BUT_OUT_1_12
#   buttonoutput13 = _CV_BUT_OUT_1_13
#   buttonoutput14 = _CV_BUT_OUT_1_14
#   buttonoutput15 = _CV_BUT_OUT_1_15
#   buttonoutput16 = _CV_BUT_OUT_1_16
#   output = _CV_RES_1
#   buttonpress = _STEP_BUTTON_PRESSED_1

# [mixer]
#   input1 = _CV_BUT_OUT_1_1 * 1
#   input2 = _CV_BUT_OUT_1_2 * 2
#   input3 = _CV_BUT_OUT_1_3 * 3
#   input4 = _CV_BUT_OUT_1_4 * 4
#   input5 = _CV_BUT_OUT_1_5 * 5
#   input6 = _CV_BUT_OUT_1_6 * 6
#   input7 = _CV_BUT_OUT_1_7 * 7
#   input8 = _CV_BUT_OUT_1_8 * 8
#   maximum = _CV_BUT_OUT_1_1TO8_MAX

# [mixer]
#   input1 = _CV_BUT_OUT_1_9 * 9
#   input2 = _CV_BUT_OUT_1_10 * 10
#   input3 = _CV_BUT_OUT_1_11 * 11
#   input4 = _CV_BUT_OUT_1_12 * 12
#   input5 = _CV_BUT_OUT_1_13 * 13
#   input6 = _CV_BUT_OUT_1_14 * 14
#   input7 = _CV_BUT_OUT_1_15 * 15
#   input8 = _CV_BUT_OUT_1_16 * 16
#   maximum = _CV_BUT_OUT_1_9TO16_MAX

# [mixer]
#   input1 = _CV_BUT_OUT_1_1TO8_MAX / 16
#   input2 = _CV_BUT_OUT_1_9TO16_MAX / 16
#   maximum = _CV_MAX_1

# [mixer]
#   input1 = _CV_BUT_OUT_1_1 * 16
#   input2 = _CV_BUT_OUT_1_2 * 15
#   input3 = _CV_BUT_OUT_1_3 * 14
#   input4 = _CV_BUT_OUT_1_4 * 13
#   input5 = _CV_BUT_OUT_1_5 * 12
#   input6 = _CV_BUT_OUT_1_6 * 11
#   input7 = _CV_BUT_OUT_1_7 * 10
#   input8 = _CV_BUT_OUT_1_8 * 9
#   maximum = _CV_BUT_OUT_1_1TO8_MIN

# [mixer]
#   input1 = _CV_BUT_OUT_1_9 * 8
#   input2 = _CV_BUT_OUT_1_10 * 7
#   input3 = _CV_BUT_OUT_1_11 * 6
#   input4 = _CV_BUT_OUT_1_12 * 5
#   input5 = _CV_BUT_OUT_1_13 * 4
#   input6 = _CV_BUT_OUT_1_14 * 3
#   input7 = _CV_BUT_OUT_1_15 * 2
#   input8 = _CV_BUT_OUT_1_16 * 1
#   maximum = _CV_BUT_OUT_1_9TO16_MIN

# [mixer]
#   input1 = _CV_BUT_OUT_1_1TO8_MIN
#   input2 = _CV_BUT_OUT_1_9TO16_MIN
#   maximum = _CV_BASE_FLIPPED_1

# [copy]
#   input = _CV_BASE_FLIPPED_1 * -1 + 16
#   output = _CV_BASE_UNFLIPPED

# [copy]
#   input = _CV_BASE_UNFLIPPED + 1
#   output = _CV_BASE_SCALED

# [copy]
#   input = _CV_BASE_SCALED / 16
#   output = _CV_BASE_1

# [copy]
#   input = _CV_BASE_1 * -1 + _CV_MAX_1
#   output = _CV_SPRD_1

# -------------------------------------------------
# Gates Mode
# -------------------------------------------------

# Activity and Variation are both using the same pots from performance mode.
#
# # POTS for offbeats
[pot]
    select = _GTS_MDE * _SEL_1
    clear = _CLR_GTS_MDE * _SEL_1
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.1
    notch = 0.1
    output = _OFFBTS_1

[pot]
    select = _GTS_MDE * _SEL_2
    clear = _CLR_GTS_MDE * _SEL_2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.1
    notch = 0.1
    output = _OFFBTS_2

[pot]
    select = _GTS_MDE * _SEL_3
    clear = _CLR_GTS_MDE * _SEL_3
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.1
    notch = 0.1
    output = _OFFBTS_3

[pot]
    select = _GTS_MDE * _SEL_4
    clear = _CLR_GTS_MDE * _SEL_4
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.1
    notch = 0.1
    output = _OFFBTS_4

[pot]
    select = _GTS_MDE * _SEL_5
    clear = _CLR_GTS_MDE * _SEL_5
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.1
    notch = 0.1
    output = _OFFBTS_5

[pot]
    select = _GTS_MDE * _SEL_6
    clear = _CLR_GTS_MDE * _SEL_6
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.1
    notch = 0.1
    output = _OFFBTS_6

[pot]
    select = _GTS_MDE * _SEL_7
    clear = _CLR_GTS_MDE * _SEL_7
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.1
    notch = 0.1
    output = _OFFBTS_7

[pot]
    select = _GTS_MDE * _SEL_8
    clear = _CLR_GTS_MDE * _SEL_8
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.1
    notch = 0.1
    output = _OFFBTS_8

# Pots for Distribution
[pot]
    select = _GTS_MDE * _SEL_1
    clear = _CLR_GTS_MDE * _SEL_1
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.1
    notch = 0.1
    output = _DIST_1

[pot]
    select = _GTS_MDE * _SEL_2
    clear = _CLR_GTS_MDE * _SEL_2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.1
    notch = 0.1
    output = _DIST_2

[pot]
    select = _GTS_MDE * _SEL_3
    clear = _CLR_GTS_MDE * _SEL_3
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.1
    notch = 0.1
    output = _DIST_3

[pot]
    select = _GTS_MDE * _SEL_4
    clear = _CLR_GTS_MDE * _SEL_4
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.1
    notch = 0.1
    output = _DIST_4

[pot]
    select = _GTS_MDE * _SEL_5
    clear = _CLR_GTS_MDE * _SEL_5
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.1
    notch = 0.1
    output = _DIST_5

[pot]
    select = _GTS_MDE * _SEL_6
    clear = _CLR_GTS_MDE * _SEL_6
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.1
    notch = 0.1
    output = _DIST_6

[pot]
    select = _GTS_MDE * _SEL_7
    clear = _CLR_GTS_MDE * _SEL_7
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.1
    notch = 0.1
    output = _DIST_7

[pot]
    select = _GTS_MDE * _SEL_8
    clear = _CLR_GTS_MDE * _SEL_8
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.1
    notch = 0.1
    output = _DIST_8

# # POTS for gates Deja Vu (pot value flipped for personal preference, to match things like activity or fills)
[pot]
    select = _GTS_MDE * _SEL_1
    clear = _CLR_GTS_MDE * _SEL_1
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.2
    outputscale = -1
    slope = 2
    output = _DEJA_1

[pot]
    select = _GTS_MDE * _SEL_2
    clear = _CLR_GTS_MDE * _SEL_2
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.2
    outputscale = -1
    slope = 2
    output = _DEJA_2

[pot]
    select = _GTS_MDE * _SEL_3
    clear = _CLR_GTS_MDE * _SEL_3
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.2
    outputscale = -1
    slope = 2
    output = _DEJA_3

[pot]
    select = _GTS_MDE * _SEL_4
    clear = _CLR_GTS_MDE * _SEL_4
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.2
    outputscale = -1
    slope = 2
    output = _DEJA_4

[pot]
    select = _GTS_MDE * _SEL_5
    clear = _CLR_GTS_MDE * _SEL_5
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.2
    outputscale = -1
    slope = 2
    output = _DEJA_5

[pot]
    select = _GTS_MDE * _SEL_6
    clear = _CLR_GTS_MDE * _SEL_6
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.2
    outputscale = -1
    slope = 2
    output = _DEJA_6

[pot]
    select = _GTS_MDE * _SEL_7
    clear = _CLR_GTS_MDE * _SEL_7
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.2
    outputscale = -1
    slope = 2
    output = _DEJA_7

[pot]
    select = _GTS_MDE * _SEL_8
    clear = _CLR_GTS_MDE * _SEL_8
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.2
    outputscale = -1
    slope = 2
    output = _DEJA_8

# # POTS for Rolls
[pot]
    select = _GTS_MDE * _SEL_1
    clear = _CLR_GTS_MDE * _SEL_1
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P2.2
    output = _RLLS_1

[pot]
    select = _GTS_MDE * _SEL_2
    clear = _CLR_GTS_MDE * _SEL_2
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P2.2
    output = _RLLS_2

[pot]
    select = _GTS_MDE * _SEL_3
    clear = _CLR_GTS_MDE * _SEL_3
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P2.2
    output = _RLLS_3

[pot]
    select = _GTS_MDE * _SEL_4
    clear = _CLR_GTS_MDE * _SEL_4
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P2.2
    output = _RLLS_4

[pot]
    select = _GTS_MDE * _SEL_5
    clear = _CLR_GTS_MDE * _SEL_5
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P2.2
    output = _RLLS_5

[pot]
    select = _GTS_MDE * _SEL_6
    clear = _CLR_GTS_MDE * _SEL_6
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P2.2
    output = _RLLS_6

[pot]
    select = _GTS_MDE * _SEL_7
    clear = _CLR_GTS_MDE * _SEL_7
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P2.2
    output = _RLLS_7

[pot]
    select = _GTS_MDE * _SEL_8
    clear = _CLR_GTS_MDE * _SEL_8
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P2.2
    output = _RLLS_8

# Gatelength pots are reused here from groove mode.
#
# Pots for routing gates to cv clock and also the cv sample and holds if you want to clamp the cv to only change when a gate is output. Gate routing knobs area also available in the cv mode, since they apply to both modes and are useful to access in both places.
[pot]
    select = _GTS_OR_CV_MDE * _SEL_1
    clear = _CLR_GTS_OR_CV_MDE * _SEL_1
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.2
    discrete = 4
    output = _GATE_ROUTE_1

[pot]
    select = _GTS_OR_CV_MDE * _SEL_2
    clear = _CLR_GTS_OR_CV_MDE * _SEL_2
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.2
    discrete = 4
    output = _GATE_ROUTE_2

[pot]
    select = _GTS_OR_CV_MDE * _SEL_3
    clear = _CLR_GTS_OR_CV_MDE * _SEL_3
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.2
    discrete = 4
    output = _GATE_ROUTE_3

[pot]
    select = _GTS_OR_CV_MDE * _SEL_4
    clear = _CLR_GTS_OR_CV_MDE * _SEL_4
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.2
    discrete = 4
    output = _GATE_ROUTE_4

[pot]
    select = _GTS_OR_CV_MDE * _SEL_5
    clear = _CLR_GTS_OR_CV_MDE * _SEL_5
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.2
    discrete = 4
    output = _GATE_ROUTE_5

[pot]
    select = _GTS_OR_CV_MDE * _SEL_6
    clear = _CLR_GTS_OR_CV_MDE * _SEL_6
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.2
    discrete = 4
    output = _GATE_ROUTE_6

[pot]
    select = _GTS_OR_CV_MDE * _SEL_7
    clear = _CLR_GTS_OR_CV_MDE * _SEL_7
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.2
    discrete = 4
    output = _GATE_ROUTE_7

[pot]
    select = _GTS_OR_CV_MDE * _SEL_8
    clear = _CLR_GTS_OR_CV_MDE * _SEL_8
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.2
    discrete = 4
    output = _GATE_ROUTE_8

[copy]
    input = B1.2 * _GTS_MDE
    output = _GATE_SET_LEN_MDE

# -------------------------------------------------
# CV mode
# -------------------------------------------------

# # POTS for cv variation / pattern refresh mode
[pot]
    select = _CV_MDE * _SEL_1
    clear = _CLR_CV_MDE * _SEL_1
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.1
    notch = 0.2
    lefthalf = _CV_PAT_TRG_1
    righthalf = _CV_VAR_1

[pot]
    select = _CV_MDE * _SEL_2
    clear = _CLR_CV_MDE * _SEL_2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.1
    notch = 0.2
    lefthalf = _CV_PAT_TRG_2
    righthalf = _CV_VAR_2

[pot]
    select = _CV_MDE * _SEL_3
    clear = _CLR_CV_MDE * _SEL_3
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.1
    notch = 0.2
    lefthalf = _CV_PAT_TRG_3
    righthalf = _CV_VAR_3

[pot]
    select = _CV_MDE * _SEL_4
    clear = _CLR_CV_MDE * _SEL_4
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.1
    notch = 0.2
    lefthalf = _CV_PAT_TRG_4
    righthalf = _CV_VAR_4

[pot]
    select = _CV_MDE * _SEL_5
    clear = _CLR_CV_MDE * _SEL_5
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.1
    notch = 0.2
    lefthalf = _CV_PAT_TRG_5
    righthalf = _CV_VAR_5

[pot]
    select = _CV_MDE * _SEL_6
    clear = _CLR_CV_MDE * _SEL_6
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.1
    notch = 0.2
    lefthalf = _CV_PAT_TRG_6
    righthalf = _CV_VAR_6

[pot]
    select = _CV_MDE * _SEL_7
    clear = _CLR_CV_MDE * _SEL_7
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.1
    notch = 0.2
    lefthalf = _CV_PAT_TRG_7
    righthalf = _CV_VAR_7

[pot]
    select = _CV_MDE * _SEL_8
    clear = _CLR_CV_MDE * _SEL_8
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.1
    notch = 0.2
    lefthalf = _CV_PAT_TRG_8
    righthalf = _CV_VAR_8

[random]
    clock = _CV_BAR_1 * _CV_PAT_TRG_1
    maximum = 9999
    output = _CV_PAT_1

[random]
    clock = _CV_BAR_2 * _CV_PAT_TRG_2
    maximum = 9999
    output = _CV_PAT_2

[random]
    clock = _CV_BAR_3 * _CV_PAT_TRG_3
    maximum = 9999
    output = _CV_PAT_3

[random]
    clock = _CV_BAR_4 * _CV_PAT_TRG_4
    maximum = 9999
    output = _CV_PAT_4

[random]
    clock = _CV_BAR_5 * _CV_PAT_TRG_5
    maximum = 9999
    output = _CV_PAT_5

[random]
    clock = _CV_BAR_6 * _CV_PAT_TRG_6
    maximum = 9999
    output = _CV_PAT_6

[random]
    clock = _CV_BAR_7 * _CV_PAT_TRG_7
    maximum = 9999
    output = _CV_PAT_7

[random]
    clock = _CV_BAR_8 * _CV_PAT_TRG_8
    maximum = 9999
    output = _CV_PAT_8

# POTS for pitch resolution
[pot]
    select = _CV_MDE * _SEL_1
    clear = _CLR_CV_MDE * _SEL_1
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P2.1
    discrete = 16
    output = _CV_RES_1

[pot]
    select = _CV_MDE * _SEL_2
    clear = _CLR_CV_MDE * _SEL_2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P2.1
    discrete = 16
    output = _CV_RES_2

[pot]
    select = _CV_MDE * _SEL_3
    clear = _CLR_CV_MDE * _SEL_3
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P2.1
    discrete = 16
    output = _CV_RES_3

[pot]
    select = _CV_MDE * _SEL_4
    clear = _CLR_CV_MDE * _SEL_4
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P2.1
    discrete = 16
    output = _CV_RES_4

[pot]
    select = _CV_MDE * _SEL_5
    clear = _CLR_CV_MDE * _SEL_5
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P2.1
    discrete = 16
    output = _CV_RES_5

[pot]
    select = _CV_MDE * _SEL_6
    clear = _CLR_CV_MDE * _SEL_6
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P2.1
    discrete = 16
    output = _CV_RES_6

[pot]
    select = _CV_MDE * _SEL_7
    clear = _CLR_CV_MDE * _SEL_7
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P2.1
    discrete = 16
    output = _CV_RES_7

[pot]
    select = _CV_MDE * _SEL_8
    clear = _CLR_CV_MDE * _SEL_8
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P2.1
    discrete = 16
    output = _CV_RES_8

# # POTS for base pitch
[pot]
    select = _CV_MDE * _SEL_1
    clear = _CLR_CV_MDE * _SEL_1
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.1
    outputscale = 0.5
    notch = 0.1
    bipolar = _CV_BASE_1

[pot]
    select = _CV_MDE * _SEL_2
    clear = _CLR_CV_MDE * _SEL_2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.1
    outputscale = 0.5
    notch = 0.1
    bipolar = _CV_BASE_2

[pot]
    select = _CV_MDE * _SEL_3
    clear = _CLR_CV_MDE * _SEL_3
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.1
    outputscale = 0.5
    notch = 0.1
    bipolar = _CV_BASE_3

[pot]
    select = _CV_MDE * _SEL_4
    clear = _CLR_CV_MDE * _SEL_4
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.1
    outputscale = 0.5
    notch = 0.1
    bipolar = _CV_BASE_4

[pot]
    select = _CV_MDE * _SEL_5
    clear = _CLR_CV_MDE * _SEL_5
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.1
    outputscale = 0.5
    notch = 0.1
    bipolar = _CV_BASE_5

[pot]
    select = _CV_MDE * _SEL_6
    clear = _CLR_CV_MDE * _SEL_6
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.1
    outputscale = 0.5
    notch = 0.1
    bipolar = _CV_BASE_6

[pot]
    select = _CV_MDE * _SEL_7
    clear = _CLR_CV_MDE * _SEL_7
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.1
    outputscale = 0.5
    notch = 0.1
    bipolar = _CV_BASE_7

[pot]
    select = _CV_MDE * _SEL_8
    clear = _CLR_CV_MDE * _SEL_8
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.1
    outputscale = 0.5
    notch = 0.1
    bipolar = _CV_BASE_8

# # POTS for pitch range
[pot]
    select = _CV_MDE * _SEL_1
    clear = _CLR_CV_MDE * _SEL_1
    startvalue = 0.2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.1
    outputscale = 0.5
    notch = 0.1
    output = _CV_SPRD_1

[pot]
    select = _CV_MDE * _SEL_2
    clear = _CLR_CV_MDE * _SEL_2
    startvalue = 0.2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.1
    outputscale = 0.5
    notch = 0.1
    output = _CV_SPRD_2

[pot]
    select = _CV_MDE * _SEL_3
    clear = _CLR_CV_MDE * _SEL_3
    startvalue = 0.2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.1
    outputscale = 0.5
    notch = 0.1
    output = _CV_SPRD_3

[pot]
    select = _CV_MDE * _SEL_4
    clear = _CLR_CV_MDE * _SEL_4
    startvalue = 0.2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.1
    outputscale = 0.5
    notch = 0.1
    output = _CV_SPRD_4

[pot]
    select = _CV_MDE * _SEL_5
    clear = _CLR_CV_MDE * _SEL_5
    startvalue = 0.2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.1
    outputscale = 0.5
    notch = 0.1
    output = _CV_SPRD_5

[pot]
    select = _CV_MDE * _SEL_6
    clear = _CLR_CV_MDE * _SEL_6
    startvalue = 0.2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.1
    outputscale = 0.5
    notch = 0.1
    output = _CV_SPRD_6

[pot]
    select = _CV_MDE * _SEL_7
    clear = _CLR_CV_MDE * _SEL_7
    startvalue = 0.2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.1
    outputscale = 0.5
    notch = 0.1
    output = _CV_SPRD_7

[pot]
    select = _CV_MDE * _SEL_8
    clear = _CLR_CV_MDE * _SEL_8
    startvalue = 0.2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P4.1
    outputscale = 0.5
    notch = 0.1
    output = _CV_SPRD_8

# # POTS for CV Deja Vu (pot value flipped for personal preference, to match things like activity or fills)
[pot]
    select = _CV_MDE * _SEL_1
    clear = _CLR_CV_MDE * _SEL_1
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.2
    outputscale = -1
    slope = 2
    output = _CV_DEJA_1

[pot]
    select = _CV_MDE * _SEL_2
    clear = _CLR_CV_MDE * _SEL_2
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.2
    outputscale = -1
    slope = 2
    output = _CV_DEJA_2

[pot]
    select = _CV_MDE * _SEL_3
    clear = _CLR_CV_MDE * _SEL_3
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.2
    outputscale = -1
    slope = 2
    output = _CV_DEJA_3

[pot]
    select = _CV_MDE * _SEL_4
    clear = _CLR_CV_MDE * _SEL_4
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.2
    outputscale = -1
    slope = 2
    output = _CV_DEJA_4

[pot]
    select = _CV_MDE * _SEL_5
    clear = _CLR_CV_MDE * _SEL_5
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.2
    outputscale = -1
    slope = 2
    output = _CV_DEJA_5

[pot]
    select = _CV_MDE * _SEL_6
    clear = _CLR_CV_MDE * _SEL_6
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.2
    outputscale = -1
    slope = 2
    output = _CV_DEJA_6

[pot]
    select = _CV_MDE * _SEL_7
    clear = _CLR_CV_MDE * _SEL_7
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.2
    outputscale = -1
    slope = 2
    output = _CV_DEJA_7

[pot]
    select = _CV_MDE * _SEL_8
    clear = _CLR_CV_MDE * _SEL_8
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P1.2
    outputscale = -1
    slope = 2
    output = _CV_DEJA_8

# Pots for cv quantization fade
# [pot]
#   select = _CV_MDE * _SEL_1
#   clear = _CLR_CV_MDE * _SEL_1
#   preset = _PRST
#   savepreset = _SV
#   loadpreset = _LD
#   pot = P2.2
#   notch = 0.05
#   output = _QUANT_FADE_1

# [pot]
#   select = _CV_MDE * _SEL_2
#   clear = _CLR_CV_MDE * _SEL_2
#   preset = _PRST
#   savepreset = _SV
#   loadpreset = _LD
#   pot = P2.2
#   notch = 0.05
#   output = _QUANT_FADE_2

# [pot]
#   select = _CV_MDE * _SEL_3
#   clear = _CLR_CV_MDE * _SEL_3
#   preset = _PRST
#   savepreset = _SV
#   loadpreset = _LD
#   pot = P2.2
#   notch = 0.05
#   output = _QUANT_FADE_3

# [pot]
#   select = _CV_MDE * _SEL_4
#   clear = _CLR_CV_MDE * _SEL_4
#   preset = _PRST
#   savepreset = _SV
#   loadpreset = _LD
#   pot = P2.2
#   notch = 0.05
#   output = _QUANT_FADE_4

# [pot]
#   select = _CV_MDE * _SEL_5
#   clear = _CLR_CV_MDE * _SEL_5
#   preset = _PRST
#   savepreset = _SV
#   loadpreset = _LD
#   pot = P2.2
#   notch = 0.05
#   output = _QUANT_FADE_5

# [pot]
#   select = _CV_MDE * _SEL_6
#   clear = _CLR_CV_MDE * _SEL_6
#   preset = _PRST
#   savepreset = _SV
#   loadpreset = _LD
#   pot = P2.2
#   notch = 0.05
#   output = _QUANT_FADE_6

# [pot]
#   select = _CV_MDE * _SEL_7
#   clear = _CLR_CV_MDE * _SEL_7
#   preset = _PRST
#   savepreset = _SV
#   loadpreset = _LD
#   pot = P2.2
#   notch = 0.05
#   output = _QUANT_FADE_7

# [pot]
#   select = _CV_MDE * _SEL_8
#   clear = _CLR_CV_MDE * _SEL_8
#   preset = _PRST
#   savepreset = _SV
#   loadpreset = _LD
#   pot = P2.2
#   notch = 0.05
#   output = _QUANT_FADE_8

# # POTS for cv slew
[pot]
    select = _CV_MDE * _SEL_1
    clear = _CLR_CV_MDE * _SEL_1
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.2
    outputscale = 0.4
    slope = 2
    output = _SLEW_1

[pot]
    select = _CV_MDE * _SEL_2
    clear = _CLR_CV_MDE * _SEL_2
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.2
    outputscale = 0.4
    slope = 2
    output = _SLEW_2

[pot]
    select = _CV_MDE * _SEL_3
    clear = _CLR_CV_MDE * _SEL_3
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.2
    outputscale = 0.4
    slope = 2
    output = _SLEW_3

[pot]
    select = _CV_MDE * _SEL_4
    clear = _CLR_CV_MDE * _SEL_4
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.2
    outputscale = 0.4
    slope = 2
    output = _SLEW_4

[pot]
    select = _CV_MDE * _SEL_5
    clear = _CLR_CV_MDE * _SEL_5
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.2
    outputscale = 0.4
    slope = 2
    output = _SLEW_5

[pot]
    select = _CV_MDE * _SEL_6
    clear = _CLR_CV_MDE * _SEL_6
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.2
    outputscale = 0.4
    slope = 2
    output = _SLEW_6

[pot]
    select = _CV_MDE * _SEL_7
    clear = _CLR_CV_MDE * _SEL_7
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.2
    outputscale = 0.4
    slope = 2
    output = _SLEW_7

[pot]
    select = _CV_MDE * _SEL_8
    clear = _CLR_CV_MDE * _SEL_8
    startvalue = 0
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    pot = P3.2
    outputscale = 0.4
    slope = 2
    output = _SLEW_8

[buttongroup]
    select = _CV_MDE * _SEL_1
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    minactive = 0
    maxactive = 13
    button1 = B1.7
    button2 = B1.6
    button3 = B1.8
    button4 = B2.5
    button5 = B2.7
    button6 = B2.8
    button7 = B3.5
    button8 = B3.7
    button9 = B3.6
    button10 = B3.8
    button11 = B4.5
    button12 = B4.7
    button13 = B4.8
    value1 = 1
    led1 = L1.7
    led2 = L1.6
    led3 = L1.8
    led4 = L2.5
    led5 = L2.7
    led6 = L2.8
    led7 = L3.5
    led8 = L3.7
    led9 = L3.6
    led10 = L3.8
    led11 = L4.5
    led12 = L4.7
    led13 = L4.8
    buttonoutput1 = _C_1
    buttonoutput2 = _C_SH_1
    buttonoutput3 = _D_1
    buttonoutput4 = _D_SH_1
    buttonoutput5 = _E_1
    buttonoutput6 = _F_1
    buttonoutput7 = _F_SH_1
    buttonoutput8 = _G_1
    buttonoutput9 = _G_SH_1
    buttonoutput10 = _A_1
    buttonoutput11 = _A_SH_1
    buttonoutput12 = _B_1
    buttonoutput13 = _C_OCT_1
    output = _AT_LEAST_1_KEY_SELECTED_1

[buttongroup]
    select = _CV_MDE * _SEL_2
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    minactive = 0
    maxactive = 13
    button1 = B1.7
    button2 = B1.6
    button3 = B1.8
    button4 = B2.5
    button5 = B2.7
    button6 = B2.8
    button7 = B3.5
    button8 = B3.7
    button9 = B3.6
    button10 = B3.8
    button11 = B4.5
    button12 = B4.7
    button13 = B4.8
    value1 = 1
    led1 = L1.7
    led2 = L1.6
    led3 = L1.8
    led4 = L2.5
    led5 = L2.7
    led6 = L2.8
    led7 = L3.5
    led8 = L3.7
    led9 = L3.6
    led10 = L3.8
    led11 = L4.5
    led12 = L4.7
    led13 = L4.8
    buttonoutput1 = _C_2
    buttonoutput2 = _C_SH_2
    buttonoutput3 = _D_2
    buttonoutput4 = _D_SH_2
    buttonoutput5 = _E_2
    buttonoutput6 = _F_2
    buttonoutput7 = _F_SH_2
    buttonoutput8 = _G_2
    buttonoutput9 = _G_SH_2
    buttonoutput10 = _A_2
    buttonoutput11 = _A_SH_2
    buttonoutput12 = _B_2
    buttonoutput13 = _C_OCT_2
    output = _AT_LEAST_1_KEY_SELECTED_2

[buttongroup]
    select = _CV_MDE * _SEL_3
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    minactive = 0
    maxactive = 13
    button1 = B1.7
    button2 = B1.6
    button3 = B1.8
    button4 = B2.5
    button5 = B2.7
    button6 = B2.8
    button7 = B3.5
    button8 = B3.7
    button9 = B3.6
    button10 = B3.8
    button11 = B4.5
    button12 = B4.7
    button13 = B4.8
    value1 = 1
    led1 = L1.7
    led2 = L1.6
    led3 = L1.8
    led4 = L2.5
    led5 = L2.7
    led6 = L2.8
    led7 = L3.5
    led8 = L3.7
    led9 = L3.6
    led10 = L3.8
    led11 = L4.5
    led12 = L4.7
    led13 = L4.8
    buttonoutput1 = _C_3
    buttonoutput2 = _C_SH_3
    buttonoutput3 = _D_3
    buttonoutput4 = _D_SH_3
    buttonoutput5 = _E_3
    buttonoutput6 = _F_3
    buttonoutput7 = _F_SH_3
    buttonoutput8 = _G_3
    buttonoutput9 = _G_SH_3
    buttonoutput10 = _A_3
    buttonoutput11 = _A_SH_3
    buttonoutput12 = _B_3
    buttonoutput13 = _C_OCT_3
    output = _AT_LEAST_1_KEY_SELECTED_3

[buttongroup]
    select = _CV_MDE * _SEL_4
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    minactive = 0
    maxactive = 13
    button1 = B1.7
    button2 = B1.6
    button3 = B1.8
    button4 = B2.5
    button5 = B2.7
    button6 = B2.8
    button7 = B3.5
    button8 = B3.7
    button9 = B3.6
    button10 = B3.8
    button11 = B4.5
    button12 = B4.7
    button13 = B4.8
    value1 = 1
    led1 = L1.7
    led2 = L1.6
    led3 = L1.8
    led4 = L2.5
    led5 = L2.7
    led6 = L2.8
    led7 = L3.5
    led8 = L3.7
    led9 = L3.6
    led10 = L3.8
    led11 = L4.5
    led12 = L4.7
    led13 = L4.8
    buttonoutput1 = _C_4
    buttonoutput2 = _C_SH_4
    buttonoutput3 = _D_4
    buttonoutput4 = _D_SH_4
    buttonoutput5 = _E_4
    buttonoutput6 = _F_4
    buttonoutput7 = _F_SH_4
    buttonoutput8 = _G_4
    buttonoutput9 = _G_SH_4
    buttonoutput10 = _A_4
    buttonoutput11 = _A_SH_4
    buttonoutput12 = _B_4
    buttonoutput13 = _C_OCT_4
    output = _AT_LEAST_1_KEY_SELECTED_4

[buttongroup]
    select = _CV_MDE * _SEL_5
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    minactive = 0
    maxactive = 13
    button1 = B1.7
    button2 = B1.6
    button3 = B1.8
    button4 = B2.5
    button5 = B2.7
    button6 = B2.8
    button7 = B3.5
    button8 = B3.7
    button9 = B3.6
    button10 = B3.8
    button11 = B4.5
    button12 = B4.7
    button13 = B4.8
    value1 = 1
    led1 = L1.7
    led2 = L1.6
    led3 = L1.8
    led4 = L2.5
    led5 = L2.7
    led6 = L2.8
    led7 = L3.5
    led8 = L3.7
    led9 = L3.6
    led10 = L3.8
    led11 = L4.5
    led12 = L4.7
    led13 = L4.8
    buttonoutput1 = _C_5
    buttonoutput2 = _C_SH_5
    buttonoutput3 = _D_5
    buttonoutput4 = _D_SH_5
    buttonoutput5 = _E_5
    buttonoutput6 = _F_5
    buttonoutput7 = _F_SH_5
    buttonoutput8 = _G_5
    buttonoutput9 = _G_SH_5
    buttonoutput10 = _A_5
    buttonoutput11 = _A_SH_5
    buttonoutput12 = _B_5
    buttonoutput13 = _C_OCT_5
    output = _AT_LEAST_1_KEY_SELECTED_5

[buttongroup]
    select = _CV_MDE * _SEL_6
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    minactive = 0
    maxactive = 13
    button1 = B1.7
    button2 = B1.6
    button3 = B1.8
    button4 = B2.5
    button5 = B2.7
    button6 = B2.8
    button7 = B3.5
    button8 = B3.7
    button9 = B3.6
    button10 = B3.8
    button11 = B4.5
    button12 = B4.7
    button13 = B4.8
    value1 = 1
    led1 = L1.7
    led2 = L1.6
    led3 = L1.8
    led4 = L2.5
    led5 = L2.7
    led6 = L2.8
    led7 = L3.5
    led8 = L3.7
    led9 = L3.6
    led10 = L3.8
    led11 = L4.5
    led12 = L4.7
    led13 = L4.8
    buttonoutput1 = _C_6
    buttonoutput2 = _C_SH_6
    buttonoutput3 = _D_6
    buttonoutput4 = _D_SH_6
    buttonoutput5 = _E_6
    buttonoutput6 = _F_6
    buttonoutput7 = _F_SH_6
    buttonoutput8 = _G_6
    buttonoutput9 = _G_SH_6
    buttonoutput10 = _A_6
    buttonoutput11 = _A_SH_6
    buttonoutput12 = _B_6
    buttonoutput13 = _C_OCT_6
    output = _AT_LEAST_1_KEY_SELECTED_6

[buttongroup]
    select = _CV_MDE * _SEL_7
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    minactive = 0
    maxactive = 13
    button1 = B1.7
    button2 = B1.6
    button3 = B1.8
    button4 = B2.5
    button5 = B2.7
    button6 = B2.8
    button7 = B3.5
    button8 = B3.7
    button9 = B3.6
    button10 = B3.8
    button11 = B4.5
    button12 = B4.7
    button13 = B4.8
    value1 = 1
    led1 = L1.7
    led2 = L1.6
    led3 = L1.8
    led4 = L2.5
    led5 = L2.7
    led6 = L2.8
    led7 = L3.5
    led8 = L3.7
    led9 = L3.6
    led10 = L3.8
    led11 = L4.5
    led12 = L4.7
    led13 = L4.8
    buttonoutput1 = _C_7
    buttonoutput2 = _C_SH_7
    buttonoutput3 = _D_7
    buttonoutput4 = _D_SH_7
    buttonoutput5 = _E_7
    buttonoutput6 = _F_7
    buttonoutput7 = _F_SH_7
    buttonoutput8 = _G_7
    buttonoutput9 = _G_SH_7
    buttonoutput10 = _A_7
    buttonoutput11 = _A_SH_7
    buttonoutput12 = _B_7
    buttonoutput13 = _C_OCT_7
    output = _AT_LEAST_1_KEY_SELECTED_7

[buttongroup]
    select = _CV_MDE * _SEL_8
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    minactive = 0
    maxactive = 13
    button1 = B1.7
    button2 = B1.6
    button3 = B1.8
    button4 = B2.5
    button5 = B2.7
    button6 = B2.8
    button7 = B3.5
    button8 = B3.7
    button9 = B3.6
    button10 = B3.8
    button11 = B4.5
    button12 = B4.7
    button13 = B4.8
    value1 = 1
    led1 = L1.7
    led2 = L1.6
    led3 = L1.8
    led4 = L2.5
    led5 = L2.7
    led6 = L2.8
    led7 = L3.5
    led8 = L3.7
    led9 = L3.6
    led10 = L3.8
    led11 = L4.5
    led12 = L4.7
    led13 = L4.8
    buttonoutput1 = _C_8
    buttonoutput2 = _C_SH_8
    buttonoutput3 = _D_8
    buttonoutput4 = _D_SH_8
    buttonoutput5 = _E_8
    buttonoutput6 = _F_8
    buttonoutput7 = _F_SH_8
    buttonoutput8 = _G_8
    buttonoutput9 = _G_SH_8
    buttonoutput10 = _A_8
    buttonoutput11 = _A_SH_8
    buttonoutput12 = _B_8
    buttonoutput13 = _C_OCT_8
    output = _AT_LEAST_1_KEY_SELECTED_8

# [copy]
#   input = _CV_MDE
#   output =

# Create half-lit chromatic keyboard on the step button leds.
# Superjust circuit is the most efficient way to do simple math with 8 ins and outs.
# The circuit itself is doing nothing in this case, just using it as a cheap way to send inputs to outputs.
[superjust]
    bypass = 1
    input1 = 0.2 * _CV_MDE + L1.7
    input2 = 0.1 * _CV_MDE + L1.6
    input3 = 0.2 * _CV_MDE + L1.8
    input4 = 0.1 * _CV_MDE + L2.5
    input5 = 0.2 * _CV_MDE + L2.7
    input6 = 0.2 * _CV_MDE + L2.8
    input7 = 0.1 * _CV_MDE + L3.5
    input8 = 0.2 * _CV_MDE + L3.7
    output1 = L1.7
    output2 = L1.6
    output3 = L1.8
    output4 = L2.5
    output5 = L2.7
    output6 = L2.8
    output7 = L3.5
    output8 = L3.7

[copy]
    input = _CV_MDE * -1 + 1
    output = _CV_MDE_INV

[superjust]
    bypass = 1
    input1 = 0.1 * _CV_MDE + L3.6
    input2 = 0.2 * _CV_MDE + L3.8
    input3 = 0.1 * _CV_MDE + L4.5
    input4 = 0.2 * _CV_MDE + L4.7
    input5 = 0.2 * _CV_MDE + L4.8
    input6 = L1.5 * _CV_MDE_INV
    input7 = L2.6 * _CV_MDE_INV
    input8 = L4.6 * _CV_MDE_INV
    output1 = L3.6
    output2 = L3.8
    output3 = L4.5
    output4 = L4.7
    output5 = L4.8
    output6 = L1.5
    output7 = L2.6
    output8 = L4.6

# -------------------------------------------------
# Channel Selector
# -------------------------------------------------

# Detect double clicks on any of the selector buttons, to select all channels.
# Every time a selector is pressed, we store the channel number to the queue.
# And also we trigger a trigger delay (using burst) for ~0.3 seconds from now. If the same button
# is pressed twice during that 0.3 seconds then output 1 and 2 of the queue will
# be equal values, and therefore we've detected a double click. After the 0.3 second
# trigger delay, the delay will push a value of zero (which no other button has been assigned that value)
# to the queue, so that we are guaranteed that the next press will not be duplicate value
# and falsely detect a double click.
[burst]
    hz = 3
    trigger = _CH_BUTTON_PRESSED
    skip = 1
    output = _ADD_ZERO

[compare]
    input = _ADD_ZERO
    compare = 1
    ifequal = 0
    else = _BTN_NUM
    output = _BTN_NUM_TO_QUEUE

[queue]
    input = _BTN_NUM_TO_QUEUE
    clock = _CH_BUTTON_PRESSED + _ADD_ZERO
    output1 = _LAST_BTN_PRS
    output2 = _LAST_LAST_BTN_PRS

[compare]
    input = _LAST_BTN_PRS
    compare = _LAST_LAST_BTN_PRS
    ifequal = 1
    else = 0
    output = _WAS_DBL_PRS

[copy]
    input = _CH_BUTTON_PRESSED * _WAS_DBL_PRS
    output = _DBL_CLKD_1

# Enforce that the buttons are reset prior to calling out a double click, so that when dbl click activates it will select everything.
[triggerdelay]
    input = _DBL_CLKD_1
    delay = 0.005
    repeats = 1
    output = _DBL_CLKD

# On first launch set the default state to be only 1st channel selected.
# [compare]
#   input = _NUM_SELECTIONS + _NUM_BUTTONS_PRESSED
#   compare = 0
#   ifequal = 1
#   else = _DBL_CLKD
#   output = _DEFAULT_STATE_1

# These are the selector buttons themselves. Everytime a selector is pressed,
# and there is only one button being held down, then we reset all the button values to
# the current B registers. This is because only the button you are currently holding
# will have a B register == 1, all others will be 0, and so your selection will end up
# being only the button you are currently pressing. If you are then holding a second button
# with the first still held, it will not trigger the button resets, and therefor let you select
# more channels.
[button]
    button = B3.1 + _DBL_CLKD
    startvalue = B3.1
    clear = _RST_CH_BTNS
    led = L3.1
    output = _SELECT_RAW_1

[button]
    button = B3.2 + _DBL_CLKD
    startvalue = B3.2
    clear = _RST_CH_BTNS
    led = L3.2
    output = _SELECT_RAW_2

[button]
    button = B4.1 + _DBL_CLKD
    startvalue = B4.1
    clear = _RST_CH_BTNS
    led = L4.1
    output = _SELECT_RAW_3

[button]
    button = B4.2 + _DBL_CLKD
    startvalue = B4.2
    clear = _RST_CH_BTNS
    led = L4.2
    output = _SELECT_RAW_4

[button]
    button = B3.3 + _DBL_CLKD
    startvalue = B3.3
    clear = _RST_CH_BTNS
    led = L3.3
    output = _SELECT_RAW_5

[button]
    button = B3.4 + _DBL_CLKD
    startvalue = B3.4
    clear = _RST_CH_BTNS
    led = L3.4
    output = _SELECT_RAW_6

[button]
    button = B4.3 + _DBL_CLKD
    startvalue = B4.3
    clear = _RST_CH_BTNS
    led = L4.3
    output = _SELECT_RAW_7

[button]
    button = B4.4 + _DBL_CLKD
    startvalue = B4.4
    clear = _RST_CH_BTNS
    led = L4.4
    output = _SELECT_RAW_8

[superjust]
    bypass = 1
    input1 = _SELECT_RAW_1 * _STARTING_UP_INV
    input2 = _SELECT_RAW_2 * _STARTING_UP_INV
    input3 = _SELECT_RAW_3 * _STARTING_UP_INV
    input4 = _SELECT_RAW_4 * _STARTING_UP_INV
    input5 = _SELECT_RAW_5 * _STARTING_UP_INV
    input6 = _SELECT_RAW_6 * _STARTING_UP_INV
    input7 = _SELECT_RAW_7 * _STARTING_UP_INV
    input8 = _SELECT_RAW_8 * _STARTING_UP_INV
    output1 = _SEL_1
    output2 = _SEL_2
    output3 = _SEL_3
    output4 = _SEL_4
    output5 = _SEL_5
    output6 = _SEL_6
    output7 = _SEL_7
    output8 = _SEL_8

# Calculate a few important stats, like:
# - Which button is being held down
# - The number of channels selected
# - The number of buttons being actively held down, (this is different from the number of selected channels)
# - A gate whenever any button is pressed
[mixer]
    input1 = B3.1 * 1 + 1
    input2 = B3.2 * 2 + 1
    input3 = B4.1 * 3 + 1
    input4 = B4.2 * 4 + 1
    input5 = B3.3 * 5 + 1
    input6 = B3.4 * 6 + 1
    input7 = B4.3 * 7 + 1
    input8 = B4.4 * 8 + 1
    maximum = _BTN_NUM

# [mixer]
#   input1 = _SEL_1
#   input2 = _SEL_2
#   input3 = _SEL_3
#   input4 = _SEL_4
#   input5 = _SEL_5
#   input6 = _SEL_6
#   input7 = _SEL_7
#   input8 = _SEL_8
#   output = _NUM_SELECTIONS

[mixer]
    input1 = B3.1
    input2 = B3.2
    input3 = B4.1
    input4 = B4.2
    input5 = B3.3
    input6 = B3.4
    input7 = B4.3
    input8 = B4.4
    output = _NUM_BUTTONS_PRESSED
    maximum = _SEL_BTN_PRSSD

# Convert this gate into a trigger
[burst]
    hz = 10
    trigger = _SEL_BTN_PRSSD
    output = _CH_BUTTON_PRESSED

[copy]
    input = _SEL_BTN_PRSSD * -1 + 1
    output = _SEL_BTN_PRSSD_INV

# only send a reset trigger IF there is only one button being pressed
[compare]
    input = _NUM_BUTTONS_PRESSED
    compare = 1
    ifgreater = 0
    else = 1
    output = _SHOULD_RST_CH_BTNS

[copy]
    input = _CH_BUTTON_PRESSED * _SHOULD_RST_CH_BTNS
    output = _RST_CH_BTNS

# -------------------------------------------------
# Algoquencers
# -------------------------------------------------

# TODO: fix this, the cv clock switcher shouldn't be accessible in groove mode.
[copy]
    input = _GTS_MDE + _CV_MDE
    output = _GTS_OR_CV_MDE

[copy]
    input = _GRVE_MDE * _GRVE_SET_LEN_MDE_INV + _GTS_MDE
    output = _GTS_OR_GRV_MDE

[copy]
    input = _GRVE_MDE * _GRVE_SET_LEN_MDE_INV + _GTS_OR_CV_MDE
    output = _GTS_OR_CV_OR_GRVE_MDE

# Output the gates to gate outputs.
[superjust]
    bypass = 1
    input1 = _ALG_GATE_1 + _MIDI_IN_GATE_1
    input2 = _ALG_GATE_2 + _MIDI_IN_GATE_2
    input3 = _ALG_GATE_3 + _MIDI_IN_GATE_3
    input4 = _ALG_GATE_4 + _MIDI_IN_GATE_4
    input5 = _ALG_GATE_5 + _MIDI_IN_GATE_5
    input6 = _ALG_GATE_6 + _MIDI_IN_GATE_6
    input7 = _ALG_GATE_7 + _MIDI_IN_GATE_7
    input8 = _ALG_GATE_8 + _MIDI_IN_GATE_8
    output1 = G1.1
    output2 = G1.2
    output3 = G1.3
    output4 = G1.4
    output5 = G1.5
    output6 = G1.6
    output7 = G1.7
    output8 = G1.8

# Determine which clock to use for the cv alogquencers. Current options are:
#
# 1- main clock which also clock the gate algoquencer of that channel
# 2- the gate outs from algoquencers + midi inputs
[switch]
    input1 = _CLK_1
    input2 = G1.1
    offset = _GATE_ROUTE_1
    output1 = _CV_CLK_1

[switch]
    input1 = _CLK_2
    input2 = G1.2
    offset = _GATE_ROUTE_2
    output1 = _CV_CLK_2

[switch]
    input1 = _CLK_3
    input2 = G1.3
    offset = _GATE_ROUTE_3
    output1 = _CV_CLK_3

[switch]
    input1 = _CLK_4
    input2 = G1.4
    offset = _GATE_ROUTE_4
    output1 = _CV_CLK_4

[switch]
    input1 = _CLK_5
    input2 = G1.5
    offset = _GATE_ROUTE_5
    output1 = _CV_CLK_5

[switch]
    input1 = _CLK_6
    input2 = G1.6
    offset = _GATE_ROUTE_6
    output1 = _CV_CLK_6

[switch]
    input1 = _CLK_7
    input2 = G1.7
    offset = _GATE_ROUTE_7
    output1 = _CV_CLK_7

[switch]
    input1 = _CLK_8
    input2 = G1.8
    offset = _GATE_ROUTE_8
    output1 = _CV_CLK_8

# Determine which clock to use for the cv algoquencer sample and holds. Current options are:
#
# 1- main clock which also clocks the gate algoquencer of that channel
# 2- the gate outs from algoquencers + midi inputs
[compare]
    input = _GATE_ROUTE_1
    compare = 1
    ifgreater = G1.1
    else = _CLK_1
    output = _CV_SMPL_1

[compare]
    input = _GATE_ROUTE_2
    compare = 1
    ifgreater = G1.2
    else = _CLK_2
    output = _CV_SMPL_2

[compare]
    input = _GATE_ROUTE_3
    compare = 1
    ifgreater = G1.3
    else = _CLK_3
    output = _CV_SMPL_3

[compare]
    input = _GATE_ROUTE_4
    compare = 1
    ifgreater = G1.4
    else = _CLK_4
    output = _CV_SMPL_4

[compare]
    input = _GATE_ROUTE_5
    compare = 1
    ifgreater = G1.5
    else = _CLK_5
    output = _CV_SMPL_5

[compare]
    input = _GATE_ROUTE_6
    compare = 1
    ifgreater = G1.6
    else = _CLK_6
    output = _CV_SMPL_6

[compare]
    input = _GATE_ROUTE_7
    compare = 1
    ifgreater = G1.7
    else = _CLK_7
    output = _CV_SMPL_7

[compare]
    input = _GATE_ROUTE_8
    compare = 1
    ifgreater = G1.8
    else = _CLK_8
    output = _CV_SMPL_8

# Algoquencers for CV outputs
[algoquencer]
    select = _SEL_1 * _GTS_OR_GRV_MDE
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    clock = _CV_CLK_1
    reset = _RESET_DELAYED
    pattern = _CV_PAT_1
    activity = 1
    variation = _CV_VAR_1
    dejavu = _CV_DEJA_1 + 1
    pitchlow = _CV_BASE_1
    pitchhigh = _CV_BASE_1 + _CV_SPRD_1
    pitchresolution = _CV_RES_1 + 1
    length = _LEN_OUT_1
    clear = _CLR_CV_MDE * _SEL_1 + _CLR_PROJECT
    pitch = _CV_OUT_1
    startofbar = _CV_BAR_1

[algoquencer]
    select = _SEL_2 * _GTS_OR_CV_OR_GRVE_MDE
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    clock = _CV_CLK_2
    reset = _RESET_DELAYED
    pattern = _CV_PAT_2
    activity = 1
    variation = _CV_VAR_2
    dejavu = _CV_DEJA_2 + 1
    pitchlow = _CV_BASE_2
    pitchhigh = _CV_BASE_2 + _CV_SPRD_2
    pitchresolution = _CV_RES_2 + 1
    length = _LEN_OUT_2
    clear = _CLR_CV_MDE * _SEL_2 + _CLR_PROJECT
    pitch = _CV_OUT_2
    startofbar = _CV_BAR_2

[algoquencer]
    select = _SEL_3 * _GTS_OR_CV_OR_GRVE_MDE
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    clock = _CV_CLK_3
    reset = _RESET_DELAYED
    pattern = _CV_PAT_3
    activity = 1
    variation = _CV_VAR_3
    dejavu = _CV_DEJA_3 + 1
    pitchlow = _CV_BASE_3
    pitchhigh = _CV_BASE_3 + _CV_SPRD_3
    pitchresolution = _CV_RES_3 + 1
    length = _LEN_OUT_3
    clear = _CLR_CV_MDE * _SEL_3 + _CLR_PROJECT
    pitch = _CV_OUT_3
    startofbar = _CV_BAR_3

[algoquencer]
    select = _SEL_4 * _GTS_OR_CV_OR_GRVE_MDE
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    clock = _CV_CLK_4
    reset = _RESET_DELAYED
    pattern = _CV_PAT_4
    activity = 1
    variation = _CV_VAR_4
    dejavu = _CV_DEJA_4 + 1
    pitchlow = _CV_BASE_4
    pitchhigh = _CV_BASE_4 + _CV_SPRD_4
    pitchresolution = _CV_RES_4 + 1
    length = _LEN_OUT_4
    clear = _CLR_CV_MDE * _SEL_4 + _CLR_PROJECT
    pitch = _CV_OUT_4
    startofbar = _CV_BAR_4

[algoquencer]
    select = _SEL_5 * _GTS_OR_CV_OR_GRVE_MDE
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    clock = _CV_CLK_5
    reset = _RESET_DELAYED
    pattern = _CV_PAT_5
    activity = 1
    variation = _CV_VAR_5
    dejavu = _CV_DEJA_5 + 1
    pitchlow = _CV_BASE_5
    pitchhigh = _CV_BASE_5 + _CV_SPRD_5
    pitchresolution = _CV_RES_5 + 1
    length = _LEN_OUT_5
    clear = _CLR_CV_MDE * _SEL_5 + _CLR_PROJECT
    pitch = _CV_OUT_5
    startofbar = _CV_BAR_5

[algoquencer]
    select = _SEL_6 * _GTS_OR_CV_OR_GRVE_MDE
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    clock = _CV_CLK_6
    reset = _RESET_DELAYED
    pattern = _CV_PAT_6
    activity = 1
    variation = _CV_VAR_6
    dejavu = _CV_DEJA_6 + 1
    pitchlow = _CV_BASE_6
    pitchhigh = _CV_BASE_6 + _CV_SPRD_6
    pitchresolution = _CV_RES_6 + 1
    length = _LEN_OUT_6
    clear = _CLR_CV_MDE * _SEL_6 + _CLR_PROJECT
    pitch = _CV_OUT_6
    startofbar = _CV_BAR_6

[algoquencer]
    select = _SEL_7 * _GTS_OR_CV_OR_GRVE_MDE
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    clock = _CV_CLK_7
    reset = _RESET_DELAYED
    pattern = _CV_PAT_7
    activity = 1
    variation = _CV_VAR_7
    dejavu = _CV_DEJA_7 + 1
    pitchlow = _CV_BASE_7
    pitchhigh = _CV_BASE_7 + _CV_SPRD_7
    pitchresolution = _CV_RES_7 + 1
    length = _LEN_OUT_7
    clear = _CLR_CV_MDE * _SEL_7 + _CLR_PROJECT
    pitch = _CV_OUT_7
    startofbar = _CV_BAR_7

[algoquencer]
    select = _SEL_8 * _GTS_OR_CV_OR_GRVE_MDE
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    clock = _CV_CLK_8
    reset = _RESET_DELAYED
    pattern = _CV_PAT_8
    activity = 1
    variation = _CV_VAR_8
    dejavu = _CV_DEJA_8 + 1
    pitchlow = _CV_BASE_8
    pitchhigh = _CV_BASE_8 + _CV_SPRD_8
    pitchresolution = _CV_RES_8 + 1
    length = _LEN_OUT_8
    clear = _CLR_CV_MDE * _SEL_8 + _CLR_PROJECT
    pitch = _CV_OUT_8
    startofbar = _CV_BAR_8

[sample]
    input = _CV_OUT_1
    sample = _CV_SMPL_1
    output = _CV_SH_1

[minifonion]
    bypass = _AT_LEAST_1_KEY_SELECTED_1 * -1 + 1
    select1 = _C_1 + _C_OCT_1
    selectfill1 = _C_SH_1
    select9 = _D_1
    selectfill2 = _D_SH_1
    select3 = _E_1
    select11 = _F_1
    selectfill3 = _F_SH_1
    select5 = _G_1
    selectfill4 = _G_SH_1
    select13 = _A_1
    selectfill5 = _A_SH_1
    select7 = _B_1
    root = 0
    degree = 1
    input = _CV_SH_1
    output = _CV_QUANT_1

[slew]
    input = _CV_QUANT_1
    slew = _SLEW_1
    exponential = O1

[sample]
    input = _CV_OUT_2
    sample = _CV_SMPL_2
    output = _CV_SH_2

[minifonion]
    bypass = _AT_LEAST_1_KEY_SELECTED_2 * -1 + 1
    select1 = _C_2 + _C_OCT_2
    selectfill1 = _C_SH_2
    select9 = _D_2
    selectfill2 = _D_SH_2
    select3 = _E_2
    select11 = _F_2
    selectfill3 = _F_SH_2
    select5 = _G_2
    selectfill4 = _G_SH_2
    select13 = _A_2
    selectfill5 = _A_SH_2
    select7 = _B_2
    root = 0
    degree = 1
    input = _CV_SH_2
    output = _CV_QUANT_2

[slew]
    input = _CV_QUANT_2
    slew = _SLEW_2
    exponential = O2

[sample]
    input = _CV_OUT_3
    sample = _CV_SMPL_3
    output = _CV_SH_3

[minifonion]
    bypass = _AT_LEAST_1_KEY_SELECTED_3 * -1 + 1
    select1 = _C_3 + _C_OCT_3
    selectfill1 = _C_SH_3
    select9 = _D_3
    selectfill2 = _D_SH_3
    select3 = _E_3
    select11 = _F_3
    selectfill3 = _F_SH_3
    select5 = _G_3
    selectfill4 = _G_SH_3
    select13 = _A_3
    selectfill5 = _A_SH_3
    select7 = _B_3
    root = 0
    degree = 1
    input = _CV_SH_3
    output = _CV_QUANT_3

[slew]
    input = _CV_QUANT_3
    slew = _SLEW_3
    exponential = O3

[sample]
    input = _CV_OUT_4
    sample = _CV_SMPL_4
    output = _CV_SH_4

[minifonion]
    bypass = _AT_LEAST_1_KEY_SELECTED_4 * -1 + 1
    select1 = _C_4 + _C_OCT_4
    selectfill1 = _C_SH_4
    select9 = _D_4
    selectfill2 = _D_SH_4
    select3 = _E_4
    select11 = _F_4
    selectfill3 = _F_SH_4
    select5 = _G_4
    selectfill4 = _G_SH_4
    select13 = _A_4
    selectfill5 = _A_SH_4
    select7 = _B_4
    root = 0
    degree = 1
    input = _CV_SH_4
    output = _CV_QUANT_4

[slew]
    input = _CV_QUANT_4
    slew = _SLEW_4
    exponential = O4

[sample]
    input = _CV_OUT_5
    sample = _CV_SMPL_5
    output = _CV_SH_5

[minifonion]
    bypass = _AT_LEAST_1_KEY_SELECTED_5 * -1 + 1
    select1 = _C_5 + _C_OCT_5
    selectfill1 = _C_SH_5
    select9 = _D_5
    selectfill2 = _D_SH_5
    select3 = _E_5
    select11 = _F_5
    selectfill3 = _F_SH_5
    select5 = _G_5
    selectfill4 = _G_SH_5
    select13 = _A_5
    selectfill5 = _A_SH_5
    select7 = _B_5
    root = 0
    degree = 1
    input = _CV_SH_5
    output = _CV_QUANT_5

[slew]
    input = _CV_QUANT_5
    slew = _SLEW_5
    exponential = O5

[sample]
    input = _CV_OUT_6
    sample = _CV_SMPL_6
    output = _CV_SH_6

[minifonion]
    bypass = _AT_LEAST_1_KEY_SELECTED_6 * -1 + 1
    select1 = _C_6 + _C_OCT_6
    selectfill1 = _C_SH_6
    select9 = _D_6
    selectfill2 = _D_SH_6
    select3 = _E_6
    select11 = _F_6
    selectfill3 = _F_SH_6
    select5 = _G_6
    selectfill4 = _G_SH_6
    select13 = _A_6
    selectfill5 = _A_SH_6
    select7 = _B_6
    root = 0
    degree = 1
    input = _CV_SH_6
    output = _CV_QUANT_6

[slew]
    input = _CV_QUANT_6
    slew = _SLEW_6
    exponential = O6

[sample]
    input = _CV_OUT_7
    sample = _CV_SMPL_7
    output = _CV_SH_7

[minifonion]
    bypass = _AT_LEAST_1_KEY_SELECTED_7 * -1 + 1
    select1 = _C_7 + _C_OCT_7
    selectfill1 = _C_SH_7
    select9 = _D_7
    selectfill2 = _D_SH_7
    select3 = _E_7
    select11 = _F_7
    selectfill3 = _F_SH_7
    select5 = _G_7
    selectfill4 = _G_SH_7
    select13 = _A_7
    selectfill5 = _A_SH_7
    select7 = _B_7
    root = 0
    degree = 1
    input = _CV_SH_7
    output = _CV_QUANT_7

[slew]
    input = _CV_QUANT_7
    slew = _SLEW_7
    exponential = O7

[sample]
    input = _CV_OUT_8
    sample = _CV_SMPL_8
    output = _CV_SH_8

[minifonion]
    bypass = _AT_LEAST_1_KEY_SELECTED_8 * -1 + 1
    select1 = _C_8 + _C_OCT_8
    selectfill1 = _C_SH_8
    select9 = _D_8
    selectfill2 = _D_SH_8
    select3 = _E_8
    select11 = _F_8
    selectfill3 = _F_SH_8
    select5 = _G_8
    selectfill4 = _G_SH_8
    select13 = _A_8
    selectfill5 = _A_SH_8
    select7 = _B_8
    root = 0
    degree = 1
    input = _CV_SH_8
    output = _CV_QUANT_8

[slew]
    input = _CV_QUANT_8
    slew = _SLEW_8
    exponential = O8

# Algoquencers for Gates
[algoquencer]
    select = _SEL_1 * _GTS_OR_GRV_MDE
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    clock = _CLK_1
    reset = _RESET_DELAYED
    mutebutton = _MTE_SELECTION * _SEL_1
    button1 = B1.5
    button2 = B1.6
    button3 = B2.5
    button4 = B2.6
    button5 = B3.5
    button6 = B3.6
    button7 = B4.5
    button8 = B4.6
    button9 = B1.7
    button10 = B1.8
    button11 = B2.7
    button12 = B2.8
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    pattern = _VAR_1 * _NUM_PAT + 20
    activity = _ACT_1 + 0.5
    variation = _VAR_1
    offbeats = _OFFBTS_1
    distribution = _DIST_1
    rolls = _RLLS_1
    rollcount = 1
    rollsteps = 1
    dejavu = _DEJA_1 + 1
    lengthbutton = _GATE_SET_LEN_MDE * _SEL_1
    clear = _CLR_GTS_MDE * _SEL_1 + _CLR_PROJECT
    gate = _ALGO_TRIG_1
    muteled = _MUTE_LED_1
    led1 = L1.5
    led2 = L1.6
    led3 = L2.5
    led4 = L2.6
    led5 = L3.5
    led6 = L3.6
    led7 = L4.5
    led8 = L4.6
    led9 = L1.7
    led10 = L1.8
    led11 = L2.7
    led12 = L2.8
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8
    startofbar = _START_OF_BAR_1
    lengthoutput = _LEN_OUT_1

[copy]
    input = _START_OF_BAR_1
    output = G11

[algoquencer]
    select = _SEL_2 * _GTS_OR_GRV_MDE
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    clock = _CLK_2
    reset = _RESET_DELAYED
    mutebutton = _MTE_SELECTION * _SEL_2
    button1 = B1.5
    button2 = B1.6
    button3 = B2.5
    button4 = B2.6
    button5 = B3.5
    button6 = B3.6
    button7 = B4.5
    button8 = B4.6
    button9 = B1.7
    button10 = B1.8
    button11 = B2.7
    button12 = B2.8
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    pattern = _VAR_2 * _NUM_PAT + 40
    activity = _ACT_2 + 0.5
    variation = _VAR_2
    offbeats = _OFFBTS_2
    distribution = _DIST_2
    rolls = _RLLS_2
    rollcount = 1
    rollsteps = 1
    dejavu = _DEJA_2 + 1
    lengthbutton = _GATE_SET_LEN_MDE * _SEL_2
    clear = _CLR_GTS_MDE * _SEL_2 + _CLR_PROJECT
    gate = _ALGO_TRIG_2
    muteled = _MUTE_LED_2
    led1 = L1.5
    led2 = L1.6
    led3 = L2.5
    led4 = L2.6
    led5 = L3.5
    led6 = L3.6
    led7 = L4.5
    led8 = L4.6
    led9 = L1.7
    led10 = L1.8
    led11 = L2.7
    led12 = L2.8
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8
    lengthoutput = _LEN_OUT_2

[algoquencer]
    select = _SEL_3 * _GTS_OR_GRV_MDE
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    clock = _CLK_3
    reset = _RESET_DELAYED
    mutebutton = _MTE_SELECTION * _SEL_3
    button1 = B1.5
    button2 = B1.6
    button3 = B2.5
    button4 = B2.6
    button5 = B3.5
    button6 = B3.6
    button7 = B4.5
    button8 = B4.6
    button9 = B1.7
    button10 = B1.8
    button11 = B2.7
    button12 = B2.8
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    pattern = _VAR_3 * _NUM_PAT + 60
    activity = _ACT_3 + 0.5
    variation = _VAR_3
    offbeats = _OFFBTS_3
    distribution = _DIST_3
    rolls = _RLLS_3
    rollcount = 1
    rollsteps = 1
    dejavu = _DEJA_3 + 1
    lengthbutton = _GATE_SET_LEN_MDE * _SEL_3
    clear = _CLR_GTS_MDE * _SEL_3 + _CLR_PROJECT
    gate = _ALGO_TRIG_3
    muteled = _MUTE_LED_3
    led1 = L1.5
    led2 = L1.6
    led3 = L2.5
    led4 = L2.6
    led5 = L3.5
    led6 = L3.6
    led7 = L4.5
    led8 = L4.6
    led9 = L1.7
    led10 = L1.8
    led11 = L2.7
    led12 = L2.8
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8
    lengthoutput = _LEN_OUT_3

[algoquencer]
    select = _SEL_4 * _GTS_OR_GRV_MDE
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    clock = _CLK_4
    reset = _RESET_DELAYED
    mutebutton = _MTE_SELECTION * _SEL_4
    button1 = B1.5
    button2 = B1.6
    button3 = B2.5
    button4 = B2.6
    button5 = B3.5
    button6 = B3.6
    button7 = B4.5
    button8 = B4.6
    button9 = B1.7
    button10 = B1.8
    button11 = B2.7
    button12 = B2.8
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    pattern = _VAR_4 * _NUM_PAT + 180 # algoquencer crashes at pattern=80, activity=1
    activity = _ACT_4 + 0.5
    variation = _VAR_4
    offbeats = _OFFBTS_4
    distribution = _DIST_4
    rolls = _RLLS_4
    rollcount = 1
    rollsteps = 1
    dejavu = _DEJA_4 + 1
    lengthbutton = _GATE_SET_LEN_MDE * _SEL_4
    clear = _CLR_GTS_MDE * _SEL_4 + _CLR_PROJECT
    gate = _ALGO_TRIG_4
    muteled = _MUTE_LED_4
    led1 = L1.5
    led2 = L1.6
    led3 = L2.5
    led4 = L2.6
    led5 = L3.5
    led6 = L3.6
    led7 = L4.5
    led8 = L4.6
    led9 = L1.7
    led10 = L1.8
    led11 = L2.7
    led12 = L2.8
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8
    lengthoutput = _LEN_OUT_4

[algoquencer]
    select = _SEL_5 * _GTS_OR_GRV_MDE
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    clock = _CLK_5
    reset = _RESET_DELAYED
    mutebutton = _MTE_SELECTION * _SEL_5
    button1 = B1.5
    button2 = B1.6
    button3 = B2.5
    button4 = B2.6
    button5 = B3.5
    button6 = B3.6
    button7 = B4.5
    button8 = B4.6
    button9 = B1.7
    button10 = B1.8
    button11 = B2.7
    button12 = B2.8
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    pattern = _VAR_5 * _NUM_PAT + 100
    activity = _ACT_5 + 0.5
    variation = _VAR_5
    offbeats = _OFFBTS_5
    distribution = _DIST_5
    rolls = _RLLS_5
    rollcount = 1
    rollsteps = 1
    dejavu = _DEJA_5 + 1
    lengthbutton = _GATE_SET_LEN_MDE * _SEL_5
    clear = _CLR_GTS_MDE * _SEL_5 + _CLR_PROJECT
    gate = _ALGO_TRIG_5
    muteled = _MUTE_LED_5
    led1 = L1.5
    led2 = L1.6
    led3 = L2.5
    led4 = L2.6
    led5 = L3.5
    led6 = L3.6
    led7 = L4.5
    led8 = L4.6
    led9 = L1.7
    led10 = L1.8
    led11 = L2.7
    led12 = L2.8
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8
    lengthoutput = _LEN_OUT_5

[algoquencer]
    select = _SEL_6 * _GTS_OR_GRV_MDE
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    clock = _CLK_6
    reset = _RESET_DELAYED
    mutebutton = _MTE_SELECTION * _SEL_6
    button1 = B1.5
    button2 = B1.6
    button3 = B2.5
    button4 = B2.6
    button5 = B3.5
    button6 = B3.6
    button7 = B4.5
    button8 = B4.6
    button9 = B1.7
    button10 = B1.8
    button11 = B2.7
    button12 = B2.8
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    pattern = _VAR_6 * _NUM_PAT + 120
    activity = _ACT_6 + 0.5
    variation = _VAR_6
    offbeats = _OFFBTS_6
    distribution = _DIST_6
    rolls = _RLLS_6
    rollcount = 1
    rollsteps = 1
    dejavu = _DEJA_6 + 1
    lengthbutton = _GATE_SET_LEN_MDE * _SEL_6
    clear = _CLR_GTS_MDE * _SEL_6 + _CLR_PROJECT
    gate = _ALGO_TRIG_6
    muteled = _MUTE_LED_6
    led1 = L1.5
    led2 = L1.6
    led3 = L2.5
    led4 = L2.6
    led5 = L3.5
    led6 = L3.6
    led7 = L4.5
    led8 = L4.6
    led9 = L1.7
    led10 = L1.8
    led11 = L2.7
    led12 = L2.8
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8
    lengthoutput = _LEN_OUT_6

[algoquencer]
    select = _SEL_7 * _GTS_OR_GRV_MDE
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    clock = _CLK_7
    reset = _RESET_DELAYED
    mutebutton = _MTE_SELECTION * _SEL_7
    button1 = B1.5
    button2 = B1.6
    button3 = B2.5
    button4 = B2.6
    button5 = B3.5
    button6 = B3.6
    button7 = B4.5
    button8 = B4.6
    button9 = B1.7
    button10 = B1.8
    button11 = B2.7
    button12 = B2.8
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    pattern = _VAR_7 * _NUM_PAT + 140
    activity = _ACT_7 + 0.5
    variation = _VAR_7
    offbeats = _OFFBTS_7
    distribution = _DIST_7
    rolls = _RLLS_7
    rollcount = 1
    rollsteps = 1
    dejavu = _DEJA_7 + 1
    lengthbutton = _GATE_SET_LEN_MDE * _SEL_7
    clear = _CLR_GTS_MDE * _SEL_7 + _CLR_PROJECT
    gate = _ALGO_TRIG_7
    muteled = _MUTE_LED_7
    led1 = L1.5
    led2 = L1.6
    led3 = L2.5
    led4 = L2.6
    led5 = L3.5
    led6 = L3.6
    led7 = L4.5
    led8 = L4.6
    led9 = L1.7
    led10 = L1.8
    led11 = L2.7
    led12 = L2.8
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8
    lengthoutput = _LEN_OUT_7

[algoquencer]
    select = _SEL_8 * _GTS_OR_GRV_MDE
    preset = _PRST
    savepreset = _SV
    loadpreset = _LD
    clock = _CLK_8
    reset = _RESET_DELAYED
    mutebutton = _MTE_SELECTION * _SEL_8
    button1 = B1.5
    button2 = B1.6
    button3 = B2.5
    button4 = B2.6
    button5 = B3.5
    button6 = B3.6
    button7 = B4.5
    button8 = B4.6
    button9 = B1.7
    button10 = B1.8
    button11 = B2.7
    button12 = B2.8
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    pattern = _VAR_8 * _NUM_PAT + 160
    activity = _ACT_8 + 0.5
    variation = _VAR_8
    offbeats = _OFFBTS_8
    distribution = _DIST_8
    rolls = _RLLS_8
    rollcount = 1
    rollsteps = 1
    dejavu = _DEJA_8 + 1
    lengthbutton = _GATE_SET_LEN_MDE * _SEL_8
    clear = _CLR_GTS_MDE * _SEL_8 + _CLR_PROJECT
    gate = _ALGO_TRIG_8
    muteled = _MUTE_LED_8
    led1 = L1.5
    led2 = L1.6
    led3 = L2.5
    led4 = L2.6
    led5 = L3.5
    led6 = L3.6
    led7 = L4.5
    led8 = L4.6
    led9 = L1.7
    led10 = L1.8
    led11 = L2.7
    led12 = L2.8
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8
    lengthoutput = _LEN_OUT_8

# If we use contour, we can send it the stable clock that is used for the Groove Phase Clocking. This way we can calculate the proper gate length in a more stable way. When trying to use the algoquencer gate length directly, it has issues when sending it crazy offbeat clocks (which makes sense) and ends up combining multiple steps into single gates which loses beats. Contour has a great "startfromzero" feature that enforces that each trigger from algoquencer causes an independent beat.
[contour]
    taptempo = _GROOVE_PHASE_CLOCK
    trigger = _ALGO_TRIG_1
    attack = 0
    hold = _G_LEN_1
    release = 0
    startfromzero = 1
    output = _ALG_GATE_1

[contour]
    taptempo = _GROOVE_PHASE_CLOCK
    trigger = _ALGO_TRIG_2
    attack = 0
    hold = _G_LEN_2
    release = 0
    startfromzero = 1
    output = _ALG_GATE_2

[contour]
    taptempo = _GROOVE_PHASE_CLOCK
    trigger = _ALGO_TRIG_3
    attack = 0
    hold = _G_LEN_3
    release = 0
    startfromzero = 1
    output = _ALG_GATE_3

[contour]
    taptempo = _GROOVE_PHASE_CLOCK
    trigger = _ALGO_TRIG_4
    attack = 0
    hold = _G_LEN_4
    release = 0
    startfromzero = 1
    output = _ALG_GATE_4

[contour]
    taptempo = _GROOVE_PHASE_CLOCK
    trigger = _ALGO_TRIG_5
    attack = 0
    hold = _G_LEN_5
    release = 0
    startfromzero = 1
    output = _ALG_GATE_5

[contour]
    taptempo = _GROOVE_PHASE_CLOCK
    trigger = _ALGO_TRIG_6
    attack = 0
    hold = _G_LEN_6
    release = 0
    startfromzero = 1
    output = _ALG_GATE_6

[contour]
    taptempo = _GROOVE_PHASE_CLOCK
    trigger = _ALGO_TRIG_7
    attack = 0
    hold = _G_LEN_7
    release = 0
    startfromzero = 1
    output = _ALG_GATE_7

[contour]
    taptempo = _GROOVE_PHASE_CLOCK
    trigger = _ALGO_TRIG_8
    attack = 0
    hold = _G_LEN_8
    release = 0
    startfromzero = 1
    output = _ALG_GATE_8

# Show mutes on the selectors in all modes
[superjust]
    bypass = 1
    input1 = _MUTE_LED_1 * 0.2 + L3.1
    input2 = _MUTE_LED_2 * 0.2 + L3.2
    input3 = _MUTE_LED_3 * 0.2 + L4.1
    input4 = _MUTE_LED_4 * 0.2 + L4.2
    input5 = _MUTE_LED_5 * 0.2 + L3.3
    input6 = _MUTE_LED_6 * 0.2 + L3.4
    input7 = _MUTE_LED_7 * 0.2 + L4.3
    input8 = _MUTE_LED_8 * 0.2 + L4.4
    output1 = L3.1
    output2 = L3.2
    output3 = L4.1
    output4 = L4.2
    output5 = L3.3
    output6 = L3.4
    output7 = L4.3
    output8 = L4.4

# Show the active gate outs also on the selector buttons, for convenience when in the other modes besides gate mode.
# We also add the flipped L register values to the gates, so that if the LED was already on, then it will subtract
# from the brightness on each gate, instead of adding. that way even gates on selected channels can be seen.
[superjust]
    bypass = 1
    input1 = L3.1 * -2
    input2 = L3.2 * -2
    input3 = L4.1 * -2
    input4 = L4.2 * -2
    input5 = L3.3 * -2
    input6 = L3.4 * -2
    input7 = L4.3 * -2
    input8 = L4.4 * -2
    output1 = _2L31
    output2 = _2L32
    output3 = _2L41
    output4 = _2L42
    output5 = _2L33
    output6 = _2L34
    output7 = _2L43
    output8 = _2L44

[superjust]
    bypass = 1
    input1 = _2L31 * G1.1 + G1.1
    input2 = _2L32 * G1.2 + G1.2
    input3 = _2L41 * G1.3 + G1.3
    input4 = _2L42 * G1.4 + G1.4
    input5 = _2L33 * G1.5 + G1.5
    input6 = _2L34 * G1.6 + G1.6
    input7 = _2L43 * G1.7 + G1.7
    input8 = _2L44 * G1.8 + G1.8
    output1 = _GATE_DISPLAY_1
    output2 = _GATE_DISPLAY_2
    output3 = _GATE_DISPLAY_3
    output4 = _GATE_DISPLAY_4
    output5 = _GATE_DISPLAY_5
    output6 = _GATE_DISPLAY_6
    output7 = _GATE_DISPLAY_7
    output8 = _GATE_DISPLAY_8

[superjust]
    bypass = 1
    input1 = _GATE_DISPLAY_1 * 0.2 + L3.1
    input2 = _GATE_DISPLAY_2 * 0.2 + L3.2
    input3 = _GATE_DISPLAY_3 * 0.2 + L4.1
    input4 = _GATE_DISPLAY_4 * 0.2 + L4.2
    input5 = _GATE_DISPLAY_5 * 0.2 + L3.3
    input6 = _GATE_DISPLAY_6 * 0.2 + L3.4
    input7 = _GATE_DISPLAY_7 * 0.2 + L4.3
    input8 = _GATE_DISPLAY_8 * 0.2 + L4.4
    output1 = L3.1
    output2 = L3.2
    output3 = L4.1
    output4 = L4.2
    output5 = L3.3
    output6 = L3.4
    output7 = L4.3
    output8 = L4.4

# -------------------------------------------------
# X1 Handling
# -------------------------------------------------

# Show the internal bpm on the X1 register for 1 second whenever the pot is turned.
[burst]
    hz = 0.5
    trigger = _HZ_CHNG
    output = _SHW_BPM

[math]
    input1 = _INT_HZ * 60 # 1HZ is 60BPM
    input2 = 1000 # divide by 1k to make 3 digit decimal for X1
    quotient = _BPM

[copy]
    input = _BPM * _SHW_BPM
    output = _X1_BPM

# Show the groove pattern on the X1 register for 1 second whenever the pot is turned.
[burst]
    hz = 0.5
    trigger = _GRV_PATTERN_CHANGED
    output = _SHW_GRV_PATTERN

[copy]
    input = _GROOVE_PATTERN + 1
    output = _GROOVE_PATTERN_DISPLAY

[copy]
    input = _GROOVE_PATTERN_DISPLAY * _SHW_GRV_PATTERN
    output = _X1_GROOVE

# Show the groove pattern on the X1 register for 1 second whenever the pot is turned.
[burst]
    hz = 0.5
    trigger = _GL_PATTERN_CHANGED
    output = _SHW_GL_PATTERN

[copy]
    input = _GATE_LENGTH_PATTERN + 1
    output = _GATE_LENGTH_PATTERN_DISPLAY

[copy]
    input = _GATE_LENGTH_PATTERN_DISPLAY * _SHW_GL_PATTERN
    output = _X1_GATE_LENGTH

# Combine the various X1 visuals and copy it into the actual X1 register.
[copy]
    input = _X1_GATE_LENGTH + _X1_GROOVE
    output = _X1_GROOVE_GL_PATTERNS

[copy]
    input = _X1_GROOVE_GL_PATTERNS + _X1_BPM
    output = _X1

[copy]
    input = _X1
    output = X1

# -------------------------------------------------
# Midi Out
# -------------------------------------------------

[compare]
    input = _MIDI_NOTE_SEL
    compare = 8
    ifless = 1
    else = 0
    output = _SEL_INDIVIDUAL_CH

[copy]
    input = _SEL_INDIVIDUAL_CH * -1 + 1
    output = _SEL_IND_CH_INV

[switch]
    input1 = 2048 * _SEL_INDIVIDUAL_CH
    input2 = 1024 * _SEL_INDIVIDUAL_CH
    input3 = 512 * _SEL_INDIVIDUAL_CH
    input4 = 256 * _SEL_INDIVIDUAL_CH
    input5 = 128 * _SEL_INDIVIDUAL_CH
    input6 = 64 * _SEL_INDIVIDUAL_CH
    input7 = 32 * _SEL_INDIVIDUAL_CH
    input8 = 16 * _SEL_INDIVIDUAL_CH
    offset = _MIDI_NOTE_SEL
    output1 = _SWITCH_1

[switch]
    input1 = 48 * _SEL_IND_CH_INV
    input2 = 112 * _SEL_IND_CH_INV
    input3 = 240 * _SEL_IND_CH_INV
    input4 = 496 * _SEL_IND_CH_INV
    input5 = 1008 * _SEL_IND_CH_INV
    input6 = 2032 * _SEL_IND_CH_INV
    input7 = 4080 * _SEL_IND_CH_INV
    input8 = 8 * _SEL_IND_CH_INV
    offset = _MIDI_NOTE_SEL * _SEL_IND_CH_INV
    output1 = _SWITCH_2

[adc]
    input = _SWITCH_1 + _SWITCH_2
    minimum = 0
    maximum = 4095
    bit1 = _MIDI_SEL_1
    bit2 = _MIDI_SEL_2
    bit3 = _MIDI_SEL_3
    bit4 = _MIDI_SEL_4
    bit5 = _MIDI_SEL_5
    bit6 = _MIDI_SEL_6
    bit7 = _MIDI_SEL_7
    bit8 = _MIDI_SEL_8
    bit9 = _DRUMS

[superjust]
    input1 = O1 + 5V
    input2 = O2 + 5V
    input3 = O3 + 5V
    input4 = O4 + 5V
    input5 = O5 + 5V
    input6 = O6 + 5V
    input7 = O7 + 5V
    input8 = O8 + 5V
    bypass = 1
    output1 = _MIDI_O_1
    output2 = _MIDI_O_2
    output3 = _MIDI_O_3
    output4 = _MIDI_O_4
    output5 = _MIDI_O_5
    output6 = _MIDI_O_6
    output7 = _MIDI_O_7
    output8 = _MIDI_O_8

[midiout]
    channel = _MIDI_OUT_CHANNEL + 1
    usb = 1
    trs = 1
    pitch1 = _MIDI_O_8
    pitch2 = _MIDI_O_7
    pitch3 = _MIDI_O_6
    pitch4 = _MIDI_O_5
    pitch5 = _MIDI_O_4
    pitch6 = _MIDI_O_3
    pitch7 = _MIDI_O_2
    pitch8 = _MIDI_O_1
    gate1 = _ALG_GATE_8 * _MIDI_SEL_8
    gate2 = _ALG_GATE_7 * _MIDI_SEL_7
    gate3 = _ALG_GATE_6 * _MIDI_SEL_6
    gate4 = _ALG_GATE_5 * _MIDI_SEL_5
    gate5 = _ALG_GATE_4 * _MIDI_SEL_4
    gate6 = _ALG_GATE_3 * _MIDI_SEL_3
    gate7 = _ALG_GATE_2 * _MIDI_SEL_2
    gate8 = _ALG_GATE_1 * _MIDI_SEL_1
    notegate1 = G1.1 * _DRUMS
    notegate2 = G1.2 * _DRUMS
    notegate3 = G1.3 * _DRUMS
    notegate4 = G1.4 * _DRUMS
    notegate5 = G1.5 * _DRUMS
    notegate6 = G1.6 * _DRUMS
    notegate7 = G1.7 * _DRUMS
    notegate8 = G1.8 * _DRUMS
    note1 = 36
    note2 = 37
    note3 = 38
    note4 = 39
    note5 = 40
    note6 = 41
    note7 = 42
    note8 = 43
    cc1 = _MIDI_O_1 * _DRUMS
    cc2 = _MIDI_O_2 * _DRUMS
    cc3 = _MIDI_O_3 * _DRUMS
    cc4 = _MIDI_O_4 * _DRUMS
    cc5 = _MIDI_O_5 * _DRUMS
    cc6 = _MIDI_O_6 * _DRUMS
    cc7 = _MIDI_O_7 * _DRUMS
    cc8 = _MIDI_O_8 * _DRUMS
    ccnumber1 = 102
    ccnumber2 = 103
    ccnumber3 = 104
    ccnumber4 = 105
    ccnumber5 = 106
    ccnumber6 = 107
    ccnumber7 = 108
    ccnumber8 = 109
